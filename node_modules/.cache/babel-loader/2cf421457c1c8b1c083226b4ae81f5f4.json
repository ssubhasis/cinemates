{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes, integerPropType, deepmerge } from '@material-ui/utils';\nimport { unstable_composeClasses as composeClasses } from '@material-ui/unstyled';\nimport { alpha } from '../styles/colorManipulator';\nimport Popper from '../Popper';\nimport ListSubheader from '../ListSubheader';\nimport Paper from '../Paper';\nimport IconButton from '../IconButton';\nimport Chip from '../Chip';\nimport ClearIcon from '../internal/svg-icons/Close';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport useAutocomplete, { createFilterOptions } from '../useAutocomplete';\nimport useThemeProps from '../styles/useThemeProps';\nimport experimentalStyled from '../styles/experimentalStyled';\nimport autocompleteClasses, { getAutocompleteUtilityClass } from './autocompleteClasses';\nimport capitalize from '../utils/capitalize';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst overridesResolver = (props, styles) => {\n  const {\n    styleProps\n  } = props;\n  const {\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused,\n    popupOpen,\n    size\n  } = styleProps;\n  return deepmerge(_extends({}, fullWidth && styles.fullWidth, hasPopupIcon && styles.hasPopupIcon, hasClearIcon && styles.hasClearIcon, {\n    [`& .${autocompleteClasses.tag}`]: _extends({}, styles.tag, styles[`tagSize${capitalize(size)}`]),\n    [`& .${autocompleteClasses.inputRoot}`]: styles.inputRoot,\n    [`& .${autocompleteClasses.input}`]: _extends({}, styles.input, inputFocused && styles.inputFocused),\n    [`& .${autocompleteClasses.endAdornment}`]: styles.endAdornment,\n    [`& .${autocompleteClasses.clearIndicator}`]: styles.clearIndicator,\n    [`& .${autocompleteClasses.popupIndicator}`]: _extends({}, styles.popupIndicator, popupOpen && styles.popupIndicatorOpen)\n  }), styles.root || {});\n};\n\nconst overridesResolverPortal = (props, styles) => {\n  const {\n    styleProps\n  } = props;\n  return deepmerge(_extends({}, styleProps.disablePortal && styles.popperDisablePortal, {\n    [`& .${autocompleteClasses.paper}`]: styles.paper,\n    [`& .${autocompleteClasses.listbox}`]: styles.listbox,\n    [`& .${autocompleteClasses.loading}`]: styles.loading,\n    [`& .${autocompleteClasses.noOptions}`]: styles.noOptions,\n    [`& .${autocompleteClasses.option}`]: styles.option,\n    [`& .${autocompleteClasses.groupLabel}`]: styles.groupLabel,\n    [`& .${autocompleteClasses.groupUl}`]: styles.groupUl\n  }), styles.popper || {});\n};\n\nconst useUtilityClasses = styleProps => {\n  const {\n    classes,\n    disablePortal,\n    focused,\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused,\n    popupOpen,\n    size\n  } = styleProps;\n  const slots = {\n    root: ['root', focused && 'focused', fullWidth && 'fullWidth', hasClearIcon && 'hasClearIcon', hasPopupIcon && 'hasPopupIcon'],\n    inputRoot: ['inputRoot'],\n    input: ['input', inputFocused && 'inputFocused'],\n    tag: ['tag', `tagSize${capitalize(size)})`],\n    endAdornment: ['endAdornment'],\n    clearIndicator: ['clearIndicator'],\n    popupIndicator: ['popupIndicator', popupOpen && 'popupIndicatorOpen'],\n    popper: ['popper', disablePortal && 'popperDisablePortal'],\n    paper: ['paper'],\n    listbox: ['listbox'],\n    loading: ['loading'],\n    noOptions: ['noOptions'],\n    option: ['option'],\n    groupLabel: ['groupLabel'],\n    groupUl: ['groupUl']\n  };\n  return composeClasses(slots, getAutocompleteUtilityClass, classes);\n};\n\nconst AutocompleteRoot = experimentalStyled('div', {}, {\n  name: 'MuiAutocomplete',\n  slot: 'Root',\n  overridesResolver\n})(({\n  styleProps\n}) => _extends({\n  /* Styles applied to the root element. */\n  [`&.Mui-focused .${autocompleteClasses.clearIndicator}`]: {\n    visibility: 'visible'\n  },\n\n  /* Avoid double tap issue on iOS */\n  '@media (pointer: fine)': {\n    [`&:hover .${autocompleteClasses.clearIndicator}`]: {\n      visibility: 'visible'\n    }\n  }\n}, styleProps.fullWidth && {\n  width: '100%'\n}, {\n  /* Styles applied to the tag elements, e.g. the chips. */\n  [`& .${autocompleteClasses.tag}`]: _extends({\n    margin: 3,\n    maxWidth: 'calc(100% - 6px)'\n  }, styleProps.size === 'small' && {\n    margin: 2,\n    maxWidth: 'calc(100% - 4px)'\n  }),\n\n  /* Styles applied to the Input element. */\n  [`& .${autocompleteClasses.inputRoot}`]: {\n    flexWrap: 'wrap',\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4\n    },\n    [`& .${autocompleteClasses.input}`]: {\n      width: 0,\n      minWidth: 30\n    },\n    '&.MuiInput-root': {\n      paddingBottom: 1,\n      '& .MuiInput-input': {\n        padding: '6px 4px 6px 0px'\n      }\n    },\n    '&.MuiInput-root.MuiInputBase-sizeSmall': {\n      '& .MuiInput-input': {\n        padding: '2px 4px 3px 0'\n      }\n    },\n    '&.MuiOutlinedInput-root': {\n      padding: 9,\n      [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n        paddingRight: 26 + 4 + 9\n      },\n      [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n        paddingRight: 52 + 4 + 9\n      },\n      [`& .${autocompleteClasses.input}`]: {\n        padding: '7.5px 4px 7.5px 6px'\n      },\n      [`& .${autocompleteClasses.endAdornment}`]: {\n        right: 9\n      }\n    },\n    '&.MuiOutlinedInput-root.MuiInputBase-sizeSmall': {\n      padding: 6,\n      [`& .${autocompleteClasses.input}`]: {\n        padding: '2.5px 4px 2.5px 6px'\n      }\n    },\n    '&.MuiFilledInput-root': {\n      paddingTop: 19,\n      paddingLeft: 8,\n      [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n        paddingRight: 26 + 4 + 9\n      },\n      [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n        paddingRight: 52 + 4 + 9\n      },\n      '& .MuiFilledInput-input': {\n        padding: '7px 4px'\n      },\n      [`& .${autocompleteClasses.endAdornment}`]: {\n        right: 9\n      }\n    },\n    '&.MuiFilledInput-root.MuiInputBase-sizeSmall': {\n      paddingBottom: 1,\n      '& .MuiFilledInput-input': {\n        padding: '2.5px 4px'\n      }\n    }\n  },\n\n  /* Styles applied to the input element. */\n  [`& .${autocompleteClasses.input}`]: _extends({\n    flexGrow: 1,\n    textOverflow: 'ellipsis',\n    opacity: 0\n  }, styleProps.inputFocused && {\n    opacity: 1\n  })\n}));\nconst AutocompleteEndAdornment = experimentalStyled('div', {}, {\n  name: 'MuiAutocomplete',\n  slot: 'EndAdornment'\n})({\n  /* Styles applied to the endAdornment element. */\n  // We use a position absolute to support wrapping tags.\n  position: 'absolute',\n  right: 0,\n  top: 'calc(50% - 14px)' // Center vertically\n\n});\nconst AutocompleteClearIndicator = experimentalStyled(IconButton, {}, {\n  name: 'MuiAutocomplete',\n  slot: 'ClearIndicator'\n})({\n  /* Styles applied to the clear indicator. */\n  marginRight: -2,\n  padding: 4,\n  visibility: 'hidden'\n});\nconst AutocompletePopupIndicator = experimentalStyled(IconButton, {}, {\n  name: 'MuiAutocomplete',\n  slot: 'PopupIndicator'\n})(({\n  styleProps\n}) => _extends({\n  /* Styles applied to the popup indicator. */\n  padding: 2,\n  marginRight: -2\n}, styleProps.popupOpen && {\n  transform: 'rotate(180deg)'\n}));\nconst AutocompletePopper = experimentalStyled(Popper, {}, {\n  name: 'MuiAutocomplete',\n  slot: 'Popper',\n  overridesResolver: overridesResolverPortal\n})(({\n  theme,\n  styleProps\n}) => _extends({\n  /* Styles applied to the popper element. */\n  zIndex: theme.zIndex.modal\n}, styleProps.disablePortal && {\n  position: 'absolute'\n}));\nconst AutocompletePaper = experimentalStyled(Paper, {}, {\n  name: 'MuiAutocomplete',\n  slot: 'Paper'\n})(({\n  theme\n}) => _extends({}, theme.typography.body1, {\n  overflow: 'auto',\n  margin: '4px 0'\n}));\nconst AutocompleteLoading = experimentalStyled('div', {}, {\n  name: 'MuiAutocomplete',\n  slot: 'Loading'\n})(({\n  theme\n}) => ({\n  /* Styles applied to the loading wrapper. */\n  color: theme.palette.text.secondary,\n  padding: '14px 16px'\n}));\nconst AutocompleteNoOptions = experimentalStyled('div', {}, {\n  name: 'MuiAutocomplete',\n  slot: 'NoOptions'\n})(({\n  theme\n}) => ({\n  /* Styles applied to the no option wrapper. */\n  color: theme.palette.text.secondary,\n  padding: '14px 16px'\n}));\nconst AutocompleteListbox = experimentalStyled('div', {}, {\n  name: 'MuiAutocomplete',\n  slot: 'Listbox'\n})(({\n  theme\n}) => ({\n  /* Styles applied to the listbox component. */\n  listStyle: 'none',\n  margin: 0,\n  padding: '8px 0',\n  maxHeight: '40vh',\n  overflow: 'auto',\n\n  /* Styles applied to the option elements. */\n  [`& .${autocompleteClasses.option}`]: {\n    minHeight: 48,\n    display: 'flex',\n    overflow: 'hidden',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    cursor: 'pointer',\n    paddingTop: 6,\n    boxSizing: 'border-box',\n    outline: '0',\n    WebkitTapHighlightColor: 'transparent',\n    paddingBottom: 6,\n    paddingLeft: 16,\n    paddingRight: 16,\n    [theme.breakpoints.up('sm')]: {\n      minHeight: 'auto'\n    },\n    '&[data-focus=\"true\"]': {\n      backgroundColor: theme.palette.action.hover,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    },\n    '&[aria-disabled=\"true\"]': {\n      opacity: theme.palette.action.disabledOpacity,\n      pointerEvents: 'none'\n    },\n    '&.Mui-focusVisible': {\n      backgroundColor: theme.palette.action.focus\n    },\n    '&[aria-selected=\"true\"]': {\n      backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n      '&[data-focus=\"true\"]': {\n        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: theme.palette.action.selected\n        }\n      },\n      '&.Mui-focusVisible': {\n        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)\n      }\n    }\n  }\n}));\nconst AutocompleteGroupLabel = experimentalStyled(ListSubheader, {}, {\n  name: 'MuiAutocomplete',\n  slot: 'GroupLabel'\n})(({\n  theme\n}) => ({\n  /* Styles applied to the group's label elements. */\n  backgroundColor: theme.palette.background.paper,\n  top: -8\n}));\nconst AutocompleteGroupUl = experimentalStyled('ul', {}, {\n  name: 'MuiAutocomplete',\n  slot: 'GroupUl'\n})({\n  /* Styles applied to the group's ul elements. */\n  padding: 0,\n  [`& .${autocompleteClasses.option}`]: {\n    paddingLeft: 24\n  }\n});\nexport { createFilterOptions };\n\nvar _ref = /*#__PURE__*/_jsx(ClearIcon, {\n  fontSize: \"small\"\n});\n\nvar _ref2 = /*#__PURE__*/_jsx(ArrowDropDownIcon, {});\n\nconst Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiAutocomplete'\n  });\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n\n  const {\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    ChipProps,\n    className,\n    clearIcon = _ref,\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    clearText = 'Clear',\n    closeText = 'Close',\n    defaultValue = props.multiple ? [] : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled = false,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    disablePortal = false,\n    filterSelectedOptions = false,\n    forcePopupIcon = 'auto',\n    freeSolo = false,\n    fullWidth = false,\n    getLimitTagsText = more => `+${more}`,\n    getOptionLabel = option => {\n      var _option$label;\n\n      return (_option$label = option.label) !== null && _option$label !== void 0 ? _option$label : option;\n    },\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    includeInputInList = false,\n    limitTags = -1,\n    ListboxComponent = 'ul',\n    ListboxProps,\n    loading = false,\n    loadingText = 'Loading…',\n    multiple = false,\n    noOptionsText = 'No options',\n    openOnFocus = false,\n    openText = 'Open',\n    PaperComponent = Paper,\n    PopperComponent = Popper,\n    popupIcon = _ref2,\n    renderGroup: renderGroupProp,\n    renderInput,\n    renderOption: renderOptionProp,\n    renderTags,\n    selectOnFocus = !props.freeSolo,\n    size = 'medium'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"autoComplete\", \"autoHighlight\", \"autoSelect\", \"blurOnSelect\", \"ChipProps\", \"className\", \"clearIcon\", \"clearOnBlur\", \"clearOnEscape\", \"clearText\", \"closeText\", \"defaultValue\", \"disableClearable\", \"disableCloseOnSelect\", \"disabled\", \"disabledItemsFocusable\", \"disableListWrap\", \"disablePortal\", \"filterOptions\", \"filterSelectedOptions\", \"forcePopupIcon\", \"freeSolo\", \"fullWidth\", \"getLimitTagsText\", \"getOptionDisabled\", \"getOptionLabel\", \"getOptionSelected\", \"groupBy\", \"handleHomeEndKeys\", \"id\", \"includeInputInList\", \"inputValue\", \"limitTags\", \"ListboxComponent\", \"ListboxProps\", \"loading\", \"loadingText\", \"multiple\", \"noOptionsText\", \"onChange\", \"onClose\", \"onHighlightChange\", \"onInputChange\", \"onOpen\", \"open\", \"openOnFocus\", \"openText\", \"options\", \"PaperComponent\", \"PopperComponent\", \"popupIcon\", \"renderGroup\", \"renderInput\", \"renderOption\", \"renderTags\", \"selectOnFocus\", \"size\", \"value\"]);\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n\n  const {\n    getRootProps,\n    getInputProps,\n    getInputLabelProps,\n    getPopupIndicatorProps,\n    getClearProps,\n    getTagProps,\n    getListboxProps,\n    getOptionProps,\n    value,\n    dirty,\n    id,\n    popupOpen,\n    focused,\n    focusedTag,\n    anchorEl,\n    setAnchorEl,\n    inputValue,\n    groupedOptions\n  } = useAutocomplete(_extends({}, props, {\n    componentName: 'Autocomplete'\n  }));\n  const hasClearIcon = !disableClearable && !disabled && dirty;\n  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n\n  const styleProps = _extends({}, props, {\n    disablePortal,\n    focused,\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused: focusedTag === -1,\n    popupOpen,\n    size\n  });\n\n  const classes = useUtilityClasses(styleProps);\n  let startAdornment;\n\n  if (multiple && value.length > 0) {\n    const getCustomizedTagProps = params => _extends({\n      className: clsx(classes.tag),\n      disabled\n    }, getTagProps(params));\n\n    if (renderTags) {\n      startAdornment = renderTags(value, getCustomizedTagProps);\n    } else {\n      startAdornment = value.map((option, index) => /*#__PURE__*/_jsx(Chip, _extends({\n        label: getOptionLabel(option),\n        size: size\n      }, getCustomizedTagProps({\n        index\n      }), ChipProps)));\n    }\n  }\n\n  if (limitTags > -1 && Array.isArray(startAdornment)) {\n    const more = startAdornment.length - limitTags;\n\n    if (!focused && more > 0) {\n      startAdornment = startAdornment.splice(0, limitTags);\n      startAdornment.push( /*#__PURE__*/_jsx(\"span\", {\n        className: classes.tag,\n        children: getLimitTagsText(more)\n      }, startAdornment.length));\n    }\n  }\n\n  const defaultRenderGroup = params => /*#__PURE__*/_jsxs(\"li\", {\n    children: [/*#__PURE__*/_jsx(AutocompleteGroupLabel, {\n      className: classes.groupLabel,\n      styleProps: styleProps,\n      component: \"div\",\n      children: params.group\n    }), /*#__PURE__*/_jsx(AutocompleteGroupUl, {\n      className: classes.groupUl,\n      styleProps: styleProps,\n      children: params.children\n    })]\n  }, params.key);\n\n  const renderGroup = renderGroupProp || defaultRenderGroup;\n\n  const defaultRenderOption = (props2, option) => /*#__PURE__*/_jsx(\"li\", _extends({}, props2, {\n    children: getOptionLabel(option)\n  }));\n\n  const renderOption = renderOptionProp || defaultRenderOption;\n\n  const renderListOption = (option, index) => {\n    const optionProps = getOptionProps({\n      option,\n      index\n    });\n    return renderOption(_extends({}, optionProps, {\n      className: classes.option\n    }), option, {\n      selected: optionProps['aria-selected'],\n      inputValue\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(AutocompleteRoot, _extends({\n      ref: ref,\n      className: clsx(classes.root, className),\n      styleProps: styleProps\n    }, getRootProps(other), {\n      children: renderInput({\n        id,\n        disabled,\n        fullWidth: true,\n        size: size === 'small' ? 'small' : undefined,\n        InputLabelProps: getInputLabelProps(),\n        InputProps: {\n          ref: setAnchorEl,\n          className: classes.inputRoot,\n          startAdornment,\n          endAdornment: /*#__PURE__*/_jsxs(AutocompleteEndAdornment, {\n            className: classes.endAdornment,\n            styleProps: styleProps,\n            children: [hasClearIcon ? /*#__PURE__*/_jsx(AutocompleteClearIndicator, _extends({}, getClearProps(), {\n              \"aria-label\": clearText,\n              title: clearText,\n              className: classes.clearIndicator,\n              styleProps: styleProps,\n              children: clearIcon\n            })) : null, hasPopupIcon ? /*#__PURE__*/_jsx(AutocompletePopupIndicator, _extends({}, getPopupIndicatorProps(), {\n              disabled: disabled,\n              \"aria-label\": popupOpen ? closeText : openText,\n              title: popupOpen ? closeText : openText,\n              className: clsx(classes.popupIndicator),\n              styleProps: styleProps,\n              children: popupIcon\n            })) : null]\n          })\n        },\n        inputProps: _extends({\n          className: clsx(classes.input),\n          disabled\n        }, getInputProps())\n      })\n    })), popupOpen && anchorEl ? /*#__PURE__*/_jsx(AutocompletePopper, {\n      as: PopperComponent,\n      className: clsx(classes.popper),\n      disablePortal: disablePortal,\n      style: {\n        width: anchorEl ? anchorEl.clientWidth : null\n      },\n      styleProps: styleProps,\n      role: \"presentation\",\n      anchorEl: anchorEl,\n      open: true,\n      children: /*#__PURE__*/_jsxs(AutocompletePaper, {\n        as: PaperComponent,\n        className: classes.paper,\n        styleProps: styleProps,\n        children: [loading && groupedOptions.length === 0 ? /*#__PURE__*/_jsx(AutocompleteLoading, {\n          className: classes.loading,\n          styleProps: styleProps,\n          children: loadingText\n        }) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/_jsx(AutocompleteNoOptions, {\n          className: classes.noOptions,\n          styleProps: styleProps,\n          role: \"presentation\",\n          onMouseDown: event => {\n            // Prevent input blur when interacting with the \"no options\" content\n            event.preventDefault();\n          },\n          children: noOptionsText\n        }) : null, groupedOptions.length > 0 ? /*#__PURE__*/_jsx(AutocompleteListbox, _extends({\n          as: ListboxComponent,\n          className: classes.listbox,\n          styleProps: styleProps\n        }, getListboxProps(), ListboxProps, {\n          children: groupedOptions.map((option, index) => {\n            if (groupBy) {\n              return renderGroup({\n                key: option.key,\n                group: option.group,\n                children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))\n              });\n            }\n\n            return renderListOption(option, index);\n          })\n        })) : null]\n      })\n    }) : null]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the portion of the selected suggestion that has not been typed by the user,\n   * known as the completion string, appears inline after the input cursor in the textbox.\n   * The inline completion string is visually highlighted and has a selected state.\n   * @default false\n   */\n  autoComplete: PropTypes.bool,\n\n  /**\n   * If `true`, the first option is automatically highlighted.\n   * @default false\n   */\n  autoHighlight: PropTypes.bool,\n\n  /**\n   * If `true`, the selected option becomes the value of the input\n   * when the Autocomplete loses focus unless the user chooses\n   * a different option or changes the character string in the input.\n   * @default false\n   */\n  autoSelect: PropTypes.bool,\n\n  /**\n   * Control if the input should be blurred when an option is selected:\n   *\n   * - `false` the input is not blurred.\n   * - `true` the input is always blurred.\n   * - `touch` the input is blurred after a touch event.\n   * - `mouse` the input is blurred after a mouse event.\n   * @default false\n   */\n  blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\n\n  /**\n   * Props applied to the [`Chip`](/api/chip/) element.\n   */\n  ChipProps: PropTypes.object,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The icon to display in place of the default clear icon.\n   * @default <ClearIcon fontSize=\"small\" />\n   */\n  clearIcon: PropTypes.node,\n\n  /**\n   * If `true`, the input's text is cleared on blur if no value is selected.\n   *\n   * Set to `true` if you want to help the user enter a new value.\n   * Set to `false` if you want to help the user resume his search.\n   * @default !props.freeSolo\n   */\n  clearOnBlur: PropTypes.bool,\n\n  /**\n   * If `true`, clear all values when the user presses escape and the popup is closed.\n   * @default false\n   */\n  clearOnEscape: PropTypes.bool,\n\n  /**\n   * Override the default text for the *clear* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Clear'\n   */\n  clearText: PropTypes.string,\n\n  /**\n   * Override the default text for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n\n  /**\n   * The default value. Use when the component is not controlled.\n   * @default props.multiple ? [] : null\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the input can't be cleared.\n   * @default false\n   */\n  disableClearable: PropTypes.bool,\n\n  /**\n   * If `true`, the popup won't close when a value is selected.\n   * @default false\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable: PropTypes.bool,\n\n  /**\n   * If `true`, the list box in the popup will not wrap focus.\n   * @default false\n   */\n  disableListWrap: PropTypes.bool,\n\n  /**\n   * If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\n   * A filter function that determines the options that are eligible.\n   *\n   * @param {T[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {T[]}\n   */\n  filterOptions: PropTypes.func,\n\n  /**\n   * If `true`, hide the selected options from the list box.\n   * @default false\n   */\n  filterSelectedOptions: PropTypes.bool,\n\n  /**\n   * Force the visibility display of the popup icon.\n   * @default 'auto'\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   * @default false\n   */\n  freeSolo: PropTypes.bool,\n\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The label to display when the tags are truncated (`limitTags`).\n   *\n   * @param {number} more The number of truncated tags.\n   * @returns {ReactNode}\n   * @default (more) => `+${more}`\n   */\n  getLimitTagsText: PropTypes.func,\n\n  /**\n   * Used to determine the disabled state for a given option.\n   *\n   * @param {T} option The option to test.\n   * @returns {boolean}\n   */\n  getOptionDisabled: PropTypes.func,\n\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   *\n   * @param {T} option\n   * @returns {string}\n   * @default (option) => option.label ?? option\n   */\n  getOptionLabel: PropTypes.func,\n\n  /**\n   * Used to determine if an option is selected, considering the current value(s).\n   * Uses strict equality by default.\n   * ⚠️ Both arguments need to be handled, an option can only match with one value.\n   *\n   * @param {T} option The option to test.\n   * @param {T} value The value to test against.\n   * @returns {boolean}\n   */\n  getOptionSelected: PropTypes.func,\n\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {T} options The options to group.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n\n  /**\n   * If `true`, the component handles the \"Home\" and \"End\" keys when the popup is open.\n   * It should move focus to the first option and last option, respectively.\n   * @default !props.freeSolo\n   */\n  handleHomeEndKeys: PropTypes.bool,\n\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide this prop. It falls back to a randomly generated id.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the highlight can move to the input.\n   * @default false\n   */\n  includeInputInList: PropTypes.bool,\n\n  /**\n   * The input value.\n   */\n  inputValue: PropTypes.string,\n\n  /**\n   * The maximum number of tags that will be visible when not focused.\n   * Set `-1` to disable the limit.\n   * @default -1\n   */\n  limitTags: integerPropType,\n\n  /**\n   * The component used to render the listbox.\n   * @default 'ul'\n   */\n  ListboxComponent: PropTypes.elementType,\n\n  /**\n   * Props applied to the Listbox element.\n   */\n  ListboxProps: PropTypes.object,\n\n  /**\n   * If `true`, the component is in a loading state.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Text to display when in a loading state.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Loading…'\n   */\n  loadingText: PropTypes.node,\n\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * Text to display when there are no options.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'No options'\n   */\n  noOptionsText: PropTypes.node,\n\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {T|T[]} value The new value of the component.\n   * @param {string} reason One of \"create-option\", \"select-option\", \"remove-option\", \"blur\" or \"clear\".\n   * @param {string} [details]\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"select-option\"`, `\"remove-option\"`, `\"blur\"`.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the highlight option changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {T} option The highlighted option.\n   * @param {string} reason Can be: `\"keyboard\"`, `\"auto\"`, `\"mouse\"`.\n   */\n  onHighlightChange: PropTypes.func,\n\n  /**\n   * Callback fired when the input value changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} value The new value of the text input.\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`.\n   */\n  onInputChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * If `true`, the popup will open on input focus.\n   * @default false\n   */\n  openOnFocus: PropTypes.bool,\n\n  /**\n   * Override the default text for the *open popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Open'\n   */\n  openText: PropTypes.string,\n\n  /**\n   * Array of options.\n   */\n  options: PropTypes.array.isRequired,\n\n  /**\n   * The component used to render the body of the popup.\n   * @default Paper\n   */\n  PaperComponent: PropTypes.elementType,\n\n  /**\n   * The component used to position the popup.\n   * @default Popper\n   */\n  PopperComponent: PropTypes.elementType,\n\n  /**\n   * The icon to display in place of the default popup icon.\n   * @default <ArrowDropDownIcon />\n   */\n  popupIcon: PropTypes.node,\n\n  /**\n   * Render the group.\n   *\n   * @param {any} option The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n\n  /**\n   * Render the input.\n   *\n   * @param {object} params\n   * @returns {ReactNode}\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {object} props The props to apply on the li element.\n   * @param {T} option The option to render.\n   * @param {object} state The state of the component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n\n  /**\n   * Render the selected value.\n   *\n   * @param {T[]} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n\n  /**\n   * If `true`, the input's text is selected on focus.\n   * It helps the user clear the selected value.\n   * @default !props.freeSolo\n   */\n  selectOnFocus: PropTypes.bool,\n\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n\n  /**\n   * The value of the autocomplete.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   * You can customize the equality behavior with the `getOptionSelected` prop.\n   */\n  value: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.value !== undefined && !Array.isArray(props.value)) {\n      return new Error(['Material-UI: The Autocomplete expects the `value` prop to be an array or undefined.', `However, ${props.value} was provided.`].join('\\n'));\n    }\n\n    return null;\n  })\n} : void 0;\nexport default Autocomplete;","map":{"version":3,"sources":["/Users/simranbhamra/Documents/cinemates/node_modules/@material-ui/core/Autocomplete/Autocomplete.js"],"names":["_objectWithoutPropertiesLoose","_extends","React","PropTypes","clsx","chainPropTypes","integerPropType","deepmerge","unstable_composeClasses","composeClasses","alpha","Popper","ListSubheader","Paper","IconButton","Chip","ClearIcon","ArrowDropDownIcon","useAutocomplete","createFilterOptions","useThemeProps","experimentalStyled","autocompleteClasses","getAutocompleteUtilityClass","capitalize","jsx","_jsx","jsxs","_jsxs","overridesResolver","props","styles","styleProps","fullWidth","hasClearIcon","hasPopupIcon","inputFocused","popupOpen","size","tag","inputRoot","input","endAdornment","clearIndicator","popupIndicator","popupIndicatorOpen","root","overridesResolverPortal","disablePortal","popperDisablePortal","paper","listbox","loading","noOptions","option","groupLabel","groupUl","popper","useUtilityClasses","classes","focused","slots","AutocompleteRoot","name","slot","visibility","width","margin","maxWidth","flexWrap","paddingRight","minWidth","paddingBottom","padding","right","paddingTop","paddingLeft","flexGrow","textOverflow","opacity","AutocompleteEndAdornment","position","top","AutocompleteClearIndicator","marginRight","AutocompletePopupIndicator","transform","AutocompletePopper","theme","zIndex","modal","AutocompletePaper","typography","body1","overflow","AutocompleteLoading","color","palette","text","secondary","AutocompleteNoOptions","AutocompleteListbox","listStyle","maxHeight","minHeight","display","justifyContent","alignItems","cursor","boxSizing","outline","WebkitTapHighlightColor","breakpoints","up","backgroundColor","action","hover","disabledOpacity","pointerEvents","focus","primary","main","selectedOpacity","hoverOpacity","selected","focusOpacity","AutocompleteGroupLabel","background","AutocompleteGroupUl","_ref","fontSize","_ref2","Autocomplete","forwardRef","inProps","ref","autoComplete","autoHighlight","autoSelect","blurOnSelect","ChipProps","className","clearIcon","clearOnBlur","freeSolo","clearOnEscape","clearText","closeText","defaultValue","multiple","disableClearable","disableCloseOnSelect","disabled","disabledItemsFocusable","disableListWrap","filterSelectedOptions","forcePopupIcon","getLimitTagsText","more","getOptionLabel","_option$label","label","groupBy","handleHomeEndKeys","includeInputInList","limitTags","ListboxComponent","ListboxProps","loadingText","noOptionsText","openOnFocus","openText","PaperComponent","PopperComponent","popupIcon","renderGroup","renderGroupProp","renderInput","renderOption","renderOptionProp","renderTags","selectOnFocus","other","getRootProps","getInputProps","getInputLabelProps","getPopupIndicatorProps","getClearProps","getTagProps","getListboxProps","getOptionProps","value","dirty","id","focusedTag","anchorEl","setAnchorEl","inputValue","groupedOptions","componentName","startAdornment","length","getCustomizedTagProps","params","map","index","Array","isArray","splice","push","children","defaultRenderGroup","component","group","key","defaultRenderOption","props2","renderListOption","optionProps","Fragment","undefined","InputLabelProps","InputProps","title","inputProps","as","style","clientWidth","role","open","onMouseDown","event","preventDefault","options","option2","index2","process","env","NODE_ENV","propTypes","bool","oneOfType","oneOf","object","string","node","any","filterOptions","func","getOptionDisabled","getOptionSelected","elementType","onChange","onClose","onHighlightChange","onInputChange","onOpen","array","isRequired","sx","Error","join"],"mappings":"AAAA,OAAOA,6BAAP,MAA0C,yDAA1C;AACA,OAAOC,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,cAAT,EAAyBC,eAAzB,EAA0CC,SAA1C,QAA2D,oBAA3D;AACA,SAASC,uBAAuB,IAAIC,cAApC,QAA0D,uBAA1D;AACA,SAASC,KAAT,QAAsB,4BAAtB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,iBAAP,MAA8B,qCAA9B;AACA,OAAOC,eAAP,IAA0BC,mBAA1B,QAAqD,oBAArD;AACA,OAAOC,aAAP,MAA0B,yBAA1B;AACA,OAAOC,kBAAP,MAA+B,8BAA/B;AACA,OAAOC,mBAAP,IAA8BC,2BAA9B,QAAiE,uBAAjE;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA,SAASC,IAAI,IAAIC,KAAjB,QAA8B,mBAA9B;;AAEA,MAAMC,iBAAiB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC3C,QAAM;AACJC,IAAAA;AADI,MAEFF,KAFJ;AAGA,QAAM;AACJG,IAAAA,SADI;AAEJC,IAAAA,YAFI;AAGJC,IAAAA,YAHI;AAIJC,IAAAA,YAJI;AAKJC,IAAAA,SALI;AAMJC,IAAAA;AANI,MAOFN,UAPJ;AAQA,SAAOzB,SAAS,CAACN,QAAQ,CAAC,EAAD,EAAKgC,SAAS,IAAIF,MAAM,CAACE,SAAzB,EAAoCE,YAAY,IAAIJ,MAAM,CAACI,YAA3D,EAAyED,YAAY,IAAIH,MAAM,CAACG,YAAhG,EAA8G;AACrI,KAAE,MAAKZ,mBAAmB,CAACiB,GAAI,EAA/B,GAAmCtC,QAAQ,CAAC,EAAD,EAAK8B,MAAM,CAACQ,GAAZ,EAAiBR,MAAM,CAAE,UAASP,UAAU,CAACc,IAAD,CAAO,EAA5B,CAAvB,CAD0F;AAErI,KAAE,MAAKhB,mBAAmB,CAACkB,SAAU,EAArC,GAAyCT,MAAM,CAACS,SAFqF;AAGrI,KAAE,MAAKlB,mBAAmB,CAACmB,KAAM,EAAjC,GAAqCxC,QAAQ,CAAC,EAAD,EAAK8B,MAAM,CAACU,KAAZ,EAAmBL,YAAY,IAAIL,MAAM,CAACK,YAA1C,CAHwF;AAIrI,KAAE,MAAKd,mBAAmB,CAACoB,YAAa,EAAxC,GAA4CX,MAAM,CAACW,YAJkF;AAKrI,KAAE,MAAKpB,mBAAmB,CAACqB,cAAe,EAA1C,GAA8CZ,MAAM,CAACY,cALgF;AAMrI,KAAE,MAAKrB,mBAAmB,CAACsB,cAAe,EAA1C,GAA8C3C,QAAQ,CAAC,EAAD,EAAK8B,MAAM,CAACa,cAAZ,EAA4BP,SAAS,IAAIN,MAAM,CAACc,kBAAhD;AAN+E,GAA9G,CAAT,EAOZd,MAAM,CAACe,IAAP,IAAe,EAPH,CAAhB;AAQD,CApBD;;AAsBA,MAAMC,uBAAuB,GAAG,CAACjB,KAAD,EAAQC,MAAR,KAAmB;AACjD,QAAM;AACJC,IAAAA;AADI,MAEFF,KAFJ;AAGA,SAAOvB,SAAS,CAACN,QAAQ,CAAC,EAAD,EAAK+B,UAAU,CAACgB,aAAX,IAA4BjB,MAAM,CAACkB,mBAAxC,EAA6D;AACpF,KAAE,MAAK3B,mBAAmB,CAAC4B,KAAM,EAAjC,GAAqCnB,MAAM,CAACmB,KADwC;AAEpF,KAAE,MAAK5B,mBAAmB,CAAC6B,OAAQ,EAAnC,GAAuCpB,MAAM,CAACoB,OAFsC;AAGpF,KAAE,MAAK7B,mBAAmB,CAAC8B,OAAQ,EAAnC,GAAuCrB,MAAM,CAACqB,OAHsC;AAIpF,KAAE,MAAK9B,mBAAmB,CAAC+B,SAAU,EAArC,GAAyCtB,MAAM,CAACsB,SAJoC;AAKpF,KAAE,MAAK/B,mBAAmB,CAACgC,MAAO,EAAlC,GAAsCvB,MAAM,CAACuB,MALuC;AAMpF,KAAE,MAAKhC,mBAAmB,CAACiC,UAAW,EAAtC,GAA0CxB,MAAM,CAACwB,UANmC;AAOpF,KAAE,MAAKjC,mBAAmB,CAACkC,OAAQ,EAAnC,GAAuCzB,MAAM,CAACyB;AAPsC,GAA7D,CAAT,EAQZzB,MAAM,CAAC0B,MAAP,IAAiB,EARL,CAAhB;AASD,CAbD;;AAeA,MAAMC,iBAAiB,GAAG1B,UAAU,IAAI;AACtC,QAAM;AACJ2B,IAAAA,OADI;AAEJX,IAAAA,aAFI;AAGJY,IAAAA,OAHI;AAIJ3B,IAAAA,SAJI;AAKJC,IAAAA,YALI;AAMJC,IAAAA,YANI;AAOJC,IAAAA,YAPI;AAQJC,IAAAA,SARI;AASJC,IAAAA;AATI,MAUFN,UAVJ;AAWA,QAAM6B,KAAK,GAAG;AACZf,IAAAA,IAAI,EAAE,CAAC,MAAD,EAASc,OAAO,IAAI,SAApB,EAA+B3B,SAAS,IAAI,WAA5C,EAAyDC,YAAY,IAAI,cAAzE,EAAyFC,YAAY,IAAI,cAAzG,CADM;AAEZK,IAAAA,SAAS,EAAE,CAAC,WAAD,CAFC;AAGZC,IAAAA,KAAK,EAAE,CAAC,OAAD,EAAUL,YAAY,IAAI,cAA1B,CAHK;AAIZG,IAAAA,GAAG,EAAE,CAAC,KAAD,EAAS,UAASf,UAAU,CAACc,IAAD,CAAO,GAAnC,CAJO;AAKZI,IAAAA,YAAY,EAAE,CAAC,cAAD,CALF;AAMZC,IAAAA,cAAc,EAAE,CAAC,gBAAD,CANJ;AAOZC,IAAAA,cAAc,EAAE,CAAC,gBAAD,EAAmBP,SAAS,IAAI,oBAAhC,CAPJ;AAQZoB,IAAAA,MAAM,EAAE,CAAC,QAAD,EAAWT,aAAa,IAAI,qBAA5B,CARI;AASZE,IAAAA,KAAK,EAAE,CAAC,OAAD,CATK;AAUZC,IAAAA,OAAO,EAAE,CAAC,SAAD,CAVG;AAWZC,IAAAA,OAAO,EAAE,CAAC,SAAD,CAXG;AAYZC,IAAAA,SAAS,EAAE,CAAC,WAAD,CAZC;AAaZC,IAAAA,MAAM,EAAE,CAAC,QAAD,CAbI;AAcZC,IAAAA,UAAU,EAAE,CAAC,YAAD,CAdA;AAeZC,IAAAA,OAAO,EAAE,CAAC,SAAD;AAfG,GAAd;AAiBA,SAAO/C,cAAc,CAACoD,KAAD,EAAQtC,2BAAR,EAAqCoC,OAArC,CAArB;AACD,CA9BD;;AAgCA,MAAMG,gBAAgB,GAAGzC,kBAAkB,CAAC,KAAD,EAAQ,EAAR,EAAY;AACrD0C,EAAAA,IAAI,EAAE,iBAD+C;AAErDC,EAAAA,IAAI,EAAE,MAF+C;AAGrDnC,EAAAA;AAHqD,CAAZ,CAAlB,CAItB,CAAC;AACFG,EAAAA;AADE,CAAD,KAEG/B,QAAQ,CAAC;AACb;AACA,GAAE,kBAAiBqB,mBAAmB,CAACqB,cAAe,EAAtD,GAA0D;AACxDsB,IAAAA,UAAU,EAAE;AAD4C,GAF7C;;AAMb;AACA,4BAA0B;AACxB,KAAE,YAAW3C,mBAAmB,CAACqB,cAAe,EAAhD,GAAoD;AAClDsB,MAAAA,UAAU,EAAE;AADsC;AAD5B;AAPb,CAAD,EAYXjC,UAAU,CAACC,SAAX,IAAwB;AACzBiC,EAAAA,KAAK,EAAE;AADkB,CAZb,EAcX;AACD;AACA,GAAE,MAAK5C,mBAAmB,CAACiB,GAAI,EAA/B,GAAmCtC,QAAQ,CAAC;AAC1CkE,IAAAA,MAAM,EAAE,CADkC;AAE1CC,IAAAA,QAAQ,EAAE;AAFgC,GAAD,EAGxCpC,UAAU,CAACM,IAAX,KAAoB,OAApB,IAA+B;AAChC6B,IAAAA,MAAM,EAAE,CADwB;AAEhCC,IAAAA,QAAQ,EAAE;AAFsB,GAHS,CAF1C;;AAUD;AACA,GAAE,MAAK9C,mBAAmB,CAACkB,SAAU,EAArC,GAAyC;AACvC6B,IAAAA,QAAQ,EAAE,MAD6B;AAEvC,KAAE,IAAG/C,mBAAmB,CAACa,YAAa,OAAMb,mBAAmB,CAACY,YAAa,GAA7E,GAAkF;AAChFoC,MAAAA,YAAY,EAAE,KAAK;AAD6D,KAF3C;AAKvC,KAAE,IAAGhD,mBAAmB,CAACa,YAAa,IAAGb,mBAAmB,CAACY,YAAa,GAA1E,GAA+E;AAC7EoC,MAAAA,YAAY,EAAE,KAAK;AAD0D,KALxC;AAQvC,KAAE,MAAKhD,mBAAmB,CAACmB,KAAM,EAAjC,GAAqC;AACnCyB,MAAAA,KAAK,EAAE,CAD4B;AAEnCK,MAAAA,QAAQ,EAAE;AAFyB,KARE;AAYvC,uBAAmB;AACjBC,MAAAA,aAAa,EAAE,CADE;AAEjB,2BAAqB;AACnBC,QAAAA,OAAO,EAAE;AADU;AAFJ,KAZoB;AAkBvC,8CAA0C;AACxC,2BAAqB;AACnBA,QAAAA,OAAO,EAAE;AADU;AADmB,KAlBH;AAuBvC,+BAA2B;AACzBA,MAAAA,OAAO,EAAE,CADgB;AAEzB,OAAE,IAAGnD,mBAAmB,CAACa,YAAa,OAAMb,mBAAmB,CAACY,YAAa,GAA7E,GAAkF;AAChFoC,QAAAA,YAAY,EAAE,KAAK,CAAL,GAAS;AADyD,OAFzD;AAKzB,OAAE,IAAGhD,mBAAmB,CAACa,YAAa,IAAGb,mBAAmB,CAACY,YAAa,GAA1E,GAA+E;AAC7EoC,QAAAA,YAAY,EAAE,KAAK,CAAL,GAAS;AADsD,OALtD;AAQzB,OAAE,MAAKhD,mBAAmB,CAACmB,KAAM,EAAjC,GAAqC;AACnCgC,QAAAA,OAAO,EAAE;AAD0B,OARZ;AAWzB,OAAE,MAAKnD,mBAAmB,CAACoB,YAAa,EAAxC,GAA4C;AAC1CgC,QAAAA,KAAK,EAAE;AADmC;AAXnB,KAvBY;AAsCvC,sDAAkD;AAChDD,MAAAA,OAAO,EAAE,CADuC;AAEhD,OAAE,MAAKnD,mBAAmB,CAACmB,KAAM,EAAjC,GAAqC;AACnCgC,QAAAA,OAAO,EAAE;AAD0B;AAFW,KAtCX;AA4CvC,6BAAyB;AACvBE,MAAAA,UAAU,EAAE,EADW;AAEvBC,MAAAA,WAAW,EAAE,CAFU;AAGvB,OAAE,IAAGtD,mBAAmB,CAACa,YAAa,OAAMb,mBAAmB,CAACY,YAAa,GAA7E,GAAkF;AAChFoC,QAAAA,YAAY,EAAE,KAAK,CAAL,GAAS;AADyD,OAH3D;AAMvB,OAAE,IAAGhD,mBAAmB,CAACa,YAAa,IAAGb,mBAAmB,CAACY,YAAa,GAA1E,GAA+E;AAC7EoC,QAAAA,YAAY,EAAE,KAAK,CAAL,GAAS;AADsD,OANxD;AASvB,iCAA2B;AACzBG,QAAAA,OAAO,EAAE;AADgB,OATJ;AAYvB,OAAE,MAAKnD,mBAAmB,CAACoB,YAAa,EAAxC,GAA4C;AAC1CgC,QAAAA,KAAK,EAAE;AADmC;AAZrB,KA5Cc;AA4DvC,oDAAgD;AAC9CF,MAAAA,aAAa,EAAE,CAD+B;AAE9C,iCAA2B;AACzBC,QAAAA,OAAO,EAAE;AADgB;AAFmB;AA5DT,GAXxC;;AA+ED;AACA,GAAE,MAAKnD,mBAAmB,CAACmB,KAAM,EAAjC,GAAqCxC,QAAQ,CAAC;AAC5C4E,IAAAA,QAAQ,EAAE,CADkC;AAE5CC,IAAAA,YAAY,EAAE,UAF8B;AAG5CC,IAAAA,OAAO,EAAE;AAHmC,GAAD,EAI1C/C,UAAU,CAACI,YAAX,IAA2B;AAC5B2C,IAAAA,OAAO,EAAE;AADmB,GAJe;AAhF5C,CAdW,CANW,CAAzB;AA4GA,MAAMC,wBAAwB,GAAG3D,kBAAkB,CAAC,KAAD,EAAQ,EAAR,EAAY;AAC7D0C,EAAAA,IAAI,EAAE,iBADuD;AAE7DC,EAAAA,IAAI,EAAE;AAFuD,CAAZ,CAAlB,CAG9B;AACD;AACA;AACAiB,EAAAA,QAAQ,EAAE,UAHT;AAIDP,EAAAA,KAAK,EAAE,CAJN;AAKDQ,EAAAA,GAAG,EAAE,kBALJ,CAKuB;;AALvB,CAH8B,CAAjC;AAWA,MAAMC,0BAA0B,GAAG9D,kBAAkB,CAACP,UAAD,EAAa,EAAb,EAAiB;AACpEiD,EAAAA,IAAI,EAAE,iBAD8D;AAEpEC,EAAAA,IAAI,EAAE;AAF8D,CAAjB,CAAlB,CAGhC;AACD;AACAoB,EAAAA,WAAW,EAAE,CAAC,CAFb;AAGDX,EAAAA,OAAO,EAAE,CAHR;AAIDR,EAAAA,UAAU,EAAE;AAJX,CAHgC,CAAnC;AASA,MAAMoB,0BAA0B,GAAGhE,kBAAkB,CAACP,UAAD,EAAa,EAAb,EAAiB;AACpEiD,EAAAA,IAAI,EAAE,iBAD8D;AAEpEC,EAAAA,IAAI,EAAE;AAF8D,CAAjB,CAAlB,CAGhC,CAAC;AACFhC,EAAAA;AADE,CAAD,KAEG/B,QAAQ,CAAC;AACb;AACAwE,EAAAA,OAAO,EAAE,CAFI;AAGbW,EAAAA,WAAW,EAAE,CAAC;AAHD,CAAD,EAIXpD,UAAU,CAACK,SAAX,IAAwB;AACzBiD,EAAAA,SAAS,EAAE;AADc,CAJb,CALqB,CAAnC;AAYA,MAAMC,kBAAkB,GAAGlE,kBAAkB,CAACV,MAAD,EAAS,EAAT,EAAa;AACxDoD,EAAAA,IAAI,EAAE,iBADkD;AAExDC,EAAAA,IAAI,EAAE,QAFkD;AAGxDnC,EAAAA,iBAAiB,EAAEkB;AAHqC,CAAb,CAAlB,CAIxB,CAAC;AACFyC,EAAAA,KADE;AAEFxD,EAAAA;AAFE,CAAD,KAGG/B,QAAQ,CAAC;AACb;AACAwF,EAAAA,MAAM,EAAED,KAAK,CAACC,MAAN,CAAaC;AAFR,CAAD,EAGX1D,UAAU,CAACgB,aAAX,IAA4B;AAC7BiC,EAAAA,QAAQ,EAAE;AADmB,CAHjB,CAPa,CAA3B;AAaA,MAAMU,iBAAiB,GAAGtE,kBAAkB,CAACR,KAAD,EAAQ,EAAR,EAAY;AACtDkD,EAAAA,IAAI,EAAE,iBADgD;AAEtDC,EAAAA,IAAI,EAAE;AAFgD,CAAZ,CAAlB,CAGvB,CAAC;AACFwB,EAAAA;AADE,CAAD,KAEGvF,QAAQ,CAAC,EAAD,EAAKuF,KAAK,CAACI,UAAN,CAAiBC,KAAtB,EAA6B;AACzCC,EAAAA,QAAQ,EAAE,MAD+B;AAEzC3B,EAAAA,MAAM,EAAE;AAFiC,CAA7B,CALY,CAA1B;AASA,MAAM4B,mBAAmB,GAAG1E,kBAAkB,CAAC,KAAD,EAAQ,EAAR,EAAY;AACxD0C,EAAAA,IAAI,EAAE,iBADkD;AAExDC,EAAAA,IAAI,EAAE;AAFkD,CAAZ,CAAlB,CAGzB,CAAC;AACFwB,EAAAA;AADE,CAAD,MAEI;AACL;AACAQ,EAAAA,KAAK,EAAER,KAAK,CAACS,OAAN,CAAcC,IAAd,CAAmBC,SAFrB;AAGL1B,EAAAA,OAAO,EAAE;AAHJ,CAFJ,CAHyB,CAA5B;AAUA,MAAM2B,qBAAqB,GAAG/E,kBAAkB,CAAC,KAAD,EAAQ,EAAR,EAAY;AAC1D0C,EAAAA,IAAI,EAAE,iBADoD;AAE1DC,EAAAA,IAAI,EAAE;AAFoD,CAAZ,CAAlB,CAG3B,CAAC;AACFwB,EAAAA;AADE,CAAD,MAEI;AACL;AACAQ,EAAAA,KAAK,EAAER,KAAK,CAACS,OAAN,CAAcC,IAAd,CAAmBC,SAFrB;AAGL1B,EAAAA,OAAO,EAAE;AAHJ,CAFJ,CAH2B,CAA9B;AAUA,MAAM4B,mBAAmB,GAAGhF,kBAAkB,CAAC,KAAD,EAAQ,EAAR,EAAY;AACxD0C,EAAAA,IAAI,EAAE,iBADkD;AAExDC,EAAAA,IAAI,EAAE;AAFkD,CAAZ,CAAlB,CAGzB,CAAC;AACFwB,EAAAA;AADE,CAAD,MAEI;AACL;AACAc,EAAAA,SAAS,EAAE,MAFN;AAGLnC,EAAAA,MAAM,EAAE,CAHH;AAILM,EAAAA,OAAO,EAAE,OAJJ;AAKL8B,EAAAA,SAAS,EAAE,MALN;AAMLT,EAAAA,QAAQ,EAAE,MANL;;AAQL;AACA,GAAE,MAAKxE,mBAAmB,CAACgC,MAAO,EAAlC,GAAsC;AACpCkD,IAAAA,SAAS,EAAE,EADyB;AAEpCC,IAAAA,OAAO,EAAE,MAF2B;AAGpCX,IAAAA,QAAQ,EAAE,QAH0B;AAIpCY,IAAAA,cAAc,EAAE,YAJoB;AAKpCC,IAAAA,UAAU,EAAE,QALwB;AAMpCC,IAAAA,MAAM,EAAE,SAN4B;AAOpCjC,IAAAA,UAAU,EAAE,CAPwB;AAQpCkC,IAAAA,SAAS,EAAE,YARyB;AASpCC,IAAAA,OAAO,EAAE,GAT2B;AAUpCC,IAAAA,uBAAuB,EAAE,aAVW;AAWpCvC,IAAAA,aAAa,EAAE,CAXqB;AAYpCI,IAAAA,WAAW,EAAE,EAZuB;AAapCN,IAAAA,YAAY,EAAE,EAbsB;AAcpC,KAACkB,KAAK,CAACwB,WAAN,CAAkBC,EAAlB,CAAqB,IAArB,CAAD,GAA8B;AAC5BT,MAAAA,SAAS,EAAE;AADiB,KAdM;AAiBpC,4BAAwB;AACtBU,MAAAA,eAAe,EAAE1B,KAAK,CAACS,OAAN,CAAckB,MAAd,CAAqBC,KADhB;AAEtB;AACA,8BAAwB;AACtBF,QAAAA,eAAe,EAAE;AADK;AAHF,KAjBY;AAwBpC,+BAA2B;AACzBnC,MAAAA,OAAO,EAAES,KAAK,CAACS,OAAN,CAAckB,MAAd,CAAqBE,eADL;AAEzBC,MAAAA,aAAa,EAAE;AAFU,KAxBS;AA4BpC,0BAAsB;AACpBJ,MAAAA,eAAe,EAAE1B,KAAK,CAACS,OAAN,CAAckB,MAAd,CAAqBI;AADlB,KA5Bc;AA+BpC,+BAA2B;AACzBL,MAAAA,eAAe,EAAExG,KAAK,CAAC8E,KAAK,CAACS,OAAN,CAAcuB,OAAd,CAAsBC,IAAvB,EAA6BjC,KAAK,CAACS,OAAN,CAAckB,MAAd,CAAqBO,eAAlD,CADG;AAEzB,8BAAwB;AACtBR,QAAAA,eAAe,EAAExG,KAAK,CAAC8E,KAAK,CAACS,OAAN,CAAcuB,OAAd,CAAsBC,IAAvB,EAA6BjC,KAAK,CAACS,OAAN,CAAckB,MAAd,CAAqBO,eAArB,GAAuClC,KAAK,CAACS,OAAN,CAAckB,MAAd,CAAqBQ,YAAzF,CADA;AAEtB;AACA,gCAAwB;AACtBT,UAAAA,eAAe,EAAE1B,KAAK,CAACS,OAAN,CAAckB,MAAd,CAAqBS;AADhB;AAHF,OAFC;AASzB,4BAAsB;AACpBV,QAAAA,eAAe,EAAExG,KAAK,CAAC8E,KAAK,CAACS,OAAN,CAAcuB,OAAd,CAAsBC,IAAvB,EAA6BjC,KAAK,CAACS,OAAN,CAAckB,MAAd,CAAqBO,eAArB,GAAuClC,KAAK,CAACS,OAAN,CAAckB,MAAd,CAAqBU,YAAzF;AADF;AATG;AA/BS;AATjC,CAFJ,CAHyB,CAA5B;AA4DA,MAAMC,sBAAsB,GAAGzG,kBAAkB,CAACT,aAAD,EAAgB,EAAhB,EAAoB;AACnEmD,EAAAA,IAAI,EAAE,iBAD6D;AAEnEC,EAAAA,IAAI,EAAE;AAF6D,CAApB,CAAlB,CAG5B,CAAC;AACFwB,EAAAA;AADE,CAAD,MAEI;AACL;AACA0B,EAAAA,eAAe,EAAE1B,KAAK,CAACS,OAAN,CAAc8B,UAAd,CAAyB7E,KAFrC;AAGLgC,EAAAA,GAAG,EAAE,CAAC;AAHD,CAFJ,CAH4B,CAA/B;AAUA,MAAM8C,mBAAmB,GAAG3G,kBAAkB,CAAC,IAAD,EAAO,EAAP,EAAW;AACvD0C,EAAAA,IAAI,EAAE,iBADiD;AAEvDC,EAAAA,IAAI,EAAE;AAFiD,CAAX,CAAlB,CAGzB;AACD;AACAS,EAAAA,OAAO,EAAE,CAFR;AAGD,GAAE,MAAKnD,mBAAmB,CAACgC,MAAO,EAAlC,GAAsC;AACpCsB,IAAAA,WAAW,EAAE;AADuB;AAHrC,CAHyB,CAA5B;AAUA,SAASzD,mBAAT;;AAEA,IAAI8G,IAAI,GAAG,aAAavG,IAAI,CAACV,SAAD,EAAY;AACtCkH,EAAAA,QAAQ,EAAE;AAD4B,CAAZ,CAA5B;;AAIA,IAAIC,KAAK,GAAG,aAAazG,IAAI,CAACT,iBAAD,EAAoB,EAApB,CAA7B;;AAEA,MAAMmH,YAAY,GAAG,aAAalI,KAAK,CAACmI,UAAN,CAAiB,SAASD,YAAT,CAAsBE,OAAtB,EAA+BC,GAA/B,EAAoC;AACrF,QAAMzG,KAAK,GAAGV,aAAa,CAAC;AAC1BU,IAAAA,KAAK,EAAEwG,OADmB;AAE1BvE,IAAAA,IAAI,EAAE;AAFoB,GAAD,CAA3B;AAIA;;AAEA,QAAM;AACJyE,IAAAA,YAAY,GAAG,KADX;AAEJC,IAAAA,aAAa,GAAG,KAFZ;AAGJC,IAAAA,UAAU,GAAG,KAHT;AAIJC,IAAAA,YAAY,GAAG,KAJX;AAKJC,IAAAA,SALI;AAMJC,IAAAA,SANI;AAOJC,IAAAA,SAAS,GAAGb,IAPR;AAQJc,IAAAA,WAAW,GAAG,CAACjH,KAAK,CAACkH,QARjB;AASJC,IAAAA,aAAa,GAAG,KATZ;AAUJC,IAAAA,SAAS,GAAG,OAVR;AAWJC,IAAAA,SAAS,GAAG,OAXR;AAYJC,IAAAA,YAAY,GAAGtH,KAAK,CAACuH,QAAN,GAAiB,EAAjB,GAAsB,IAZjC;AAaJC,IAAAA,gBAAgB,GAAG,KAbf;AAcJC,IAAAA,oBAAoB,GAAG,KAdnB;AAeJC,IAAAA,QAAQ,GAAG,KAfP;AAgBJC,IAAAA,sBAAsB,GAAG,KAhBrB;AAiBJC,IAAAA,eAAe,GAAG,KAjBd;AAkBJ1G,IAAAA,aAAa,GAAG,KAlBZ;AAmBJ2G,IAAAA,qBAAqB,GAAG,KAnBpB;AAoBJC,IAAAA,cAAc,GAAG,MApBb;AAqBJZ,IAAAA,QAAQ,GAAG,KArBP;AAsBJ/G,IAAAA,SAAS,GAAG,KAtBR;AAuBJ4H,IAAAA,gBAAgB,GAAGC,IAAI,IAAK,IAAGA,IAAK,EAvBhC;AAwBJC,IAAAA,cAAc,GAAGzG,MAAM,IAAI;AACzB,UAAI0G,aAAJ;;AAEA,aAAO,CAACA,aAAa,GAAG1G,MAAM,CAAC2G,KAAxB,MAAmC,IAAnC,IAA2CD,aAAa,KAAK,KAAK,CAAlE,GAAsEA,aAAtE,GAAsF1G,MAA7F;AACD,KA5BG;AA6BJ4G,IAAAA,OA7BI;AA8BJC,IAAAA,iBAAiB,GAAG,CAACrI,KAAK,CAACkH,QA9BvB;AA+BJoB,IAAAA,kBAAkB,GAAG,KA/BjB;AAgCJC,IAAAA,SAAS,GAAG,CAAC,CAhCT;AAiCJC,IAAAA,gBAAgB,GAAG,IAjCf;AAkCJC,IAAAA,YAlCI;AAmCJnH,IAAAA,OAAO,GAAG,KAnCN;AAoCJoH,IAAAA,WAAW,GAAG,UApCV;AAqCJnB,IAAAA,QAAQ,GAAG,KArCP;AAsCJoB,IAAAA,aAAa,GAAG,YAtCZ;AAuCJC,IAAAA,WAAW,GAAG,KAvCV;AAwCJC,IAAAA,QAAQ,GAAG,MAxCP;AAyCJC,IAAAA,cAAc,GAAG/J,KAzCb;AA0CJgK,IAAAA,eAAe,GAAGlK,MA1Cd;AA2CJmK,IAAAA,SAAS,GAAG3C,KA3CR;AA4CJ4C,IAAAA,WAAW,EAAEC,eA5CT;AA6CJC,IAAAA,WA7CI;AA8CJC,IAAAA,YAAY,EAAEC,gBA9CV;AA+CJC,IAAAA,UA/CI;AAgDJC,IAAAA,aAAa,GAAG,CAACvJ,KAAK,CAACkH,QAhDnB;AAiDJ1G,IAAAA,IAAI,GAAG;AAjDH,MAkDFR,KAlDJ;AAAA,QAmDMwJ,KAAK,GAAGtL,6BAA6B,CAAC8B,KAAD,EAAQ,CAAC,cAAD,EAAiB,eAAjB,EAAkC,YAAlC,EAAgD,cAAhD,EAAgE,WAAhE,EAA6E,WAA7E,EAA0F,WAA1F,EAAuG,aAAvG,EAAsH,eAAtH,EAAuI,WAAvI,EAAoJ,WAApJ,EAAiK,cAAjK,EAAiL,kBAAjL,EAAqM,sBAArM,EAA6N,UAA7N,EAAyO,wBAAzO,EAAmQ,iBAAnQ,EAAsR,eAAtR,EAAuS,eAAvS,EAAwT,uBAAxT,EAAiV,gBAAjV,EAAmW,UAAnW,EAA+W,WAA/W,EAA4X,kBAA5X,EAAgZ,mBAAhZ,EAAqa,gBAAra,EAAub,mBAAvb,EAA4c,SAA5c,EAAud,mBAAvd,EAA4e,IAA5e,EAAkf,oBAAlf,EAAwgB,YAAxgB,EAAshB,WAAthB,EAAmiB,kBAAniB,EAAujB,cAAvjB,EAAukB,SAAvkB,EAAklB,aAAllB,EAAimB,UAAjmB,EAA6mB,eAA7mB,EAA8nB,UAA9nB,EAA0oB,SAA1oB,EAAqpB,mBAArpB,EAA0qB,eAA1qB,EAA2rB,QAA3rB,EAAqsB,MAArsB,EAA6sB,aAA7sB,EAA4tB,UAA5tB,EAAwuB,SAAxuB,EAAmvB,gBAAnvB,EAAqwB,iBAArwB,EAAwxB,WAAxxB,EAAqyB,aAAryB,EAAozB,aAApzB,EAAm0B,cAAn0B,EAAm1B,YAAn1B,EAAi2B,eAAj2B,EAAk3B,MAAl3B,EAA03B,OAA13B,CAAR,CAnD3C;AAoDA;;;AAGA,QAAM;AACJyJ,IAAAA,YADI;AAEJC,IAAAA,aAFI;AAGJC,IAAAA,kBAHI;AAIJC,IAAAA,sBAJI;AAKJC,IAAAA,aALI;AAMJC,IAAAA,WANI;AAOJC,IAAAA,eAPI;AAQJC,IAAAA,cARI;AASJC,IAAAA,KATI;AAUJC,IAAAA,KAVI;AAWJC,IAAAA,EAXI;AAYJ5J,IAAAA,SAZI;AAaJuB,IAAAA,OAbI;AAcJsI,IAAAA,UAdI;AAeJC,IAAAA,QAfI;AAgBJC,IAAAA,WAhBI;AAiBJC,IAAAA,UAjBI;AAkBJC,IAAAA;AAlBI,MAmBFpL,eAAe,CAACjB,QAAQ,CAAC,EAAD,EAAK6B,KAAL,EAAY;AACtCyK,IAAAA,aAAa,EAAE;AADuB,GAAZ,CAAT,CAnBnB;AAsBA,QAAMrK,YAAY,GAAG,CAACoH,gBAAD,IAAqB,CAACE,QAAtB,IAAkCwC,KAAvD;AACA,QAAM7J,YAAY,GAAG,CAAC,CAAC6G,QAAD,IAAaY,cAAc,KAAK,IAAjC,KAA0CA,cAAc,KAAK,KAAlF;;AAEA,QAAM5H,UAAU,GAAG/B,QAAQ,CAAC,EAAD,EAAK6B,KAAL,EAAY;AACrCkB,IAAAA,aADqC;AAErCY,IAAAA,OAFqC;AAGrC3B,IAAAA,SAHqC;AAIrCC,IAAAA,YAJqC;AAKrCC,IAAAA,YALqC;AAMrCC,IAAAA,YAAY,EAAE8J,UAAU,KAAK,CAAC,CANO;AAOrC7J,IAAAA,SAPqC;AAQrCC,IAAAA;AARqC,GAAZ,CAA3B;;AAWA,QAAMqB,OAAO,GAAGD,iBAAiB,CAAC1B,UAAD,CAAjC;AACA,MAAIwK,cAAJ;;AAEA,MAAInD,QAAQ,IAAI0C,KAAK,CAACU,MAAN,GAAe,CAA/B,EAAkC;AAChC,UAAMC,qBAAqB,GAAGC,MAAM,IAAI1M,QAAQ,CAAC;AAC/C4I,MAAAA,SAAS,EAAEzI,IAAI,CAACuD,OAAO,CAACpB,GAAT,CADgC;AAE/CiH,MAAAA;AAF+C,KAAD,EAG7CoC,WAAW,CAACe,MAAD,CAHkC,CAAhD;;AAKA,QAAIvB,UAAJ,EAAgB;AACdoB,MAAAA,cAAc,GAAGpB,UAAU,CAACW,KAAD,EAAQW,qBAAR,CAA3B;AACD,KAFD,MAEO;AACLF,MAAAA,cAAc,GAAGT,KAAK,CAACa,GAAN,CAAU,CAACtJ,MAAD,EAASuJ,KAAT,KAAmB,aAAanL,IAAI,CAACX,IAAD,EAAOd,QAAQ,CAAC;AAC7EgK,QAAAA,KAAK,EAAEF,cAAc,CAACzG,MAAD,CADwD;AAE7EhB,QAAAA,IAAI,EAAEA;AAFuE,OAAD,EAG3EoK,qBAAqB,CAAC;AACvBG,QAAAA;AADuB,OAAD,CAHsD,EAK1EjE,SAL0E,CAAf,CAA9C,CAAjB;AAMD;AACF;;AAED,MAAIyB,SAAS,GAAG,CAAC,CAAb,IAAkByC,KAAK,CAACC,OAAN,CAAcP,cAAd,CAAtB,EAAqD;AACnD,UAAM1C,IAAI,GAAG0C,cAAc,CAACC,MAAf,GAAwBpC,SAArC;;AAEA,QAAI,CAACzG,OAAD,IAAYkG,IAAI,GAAG,CAAvB,EAA0B;AACxB0C,MAAAA,cAAc,GAAGA,cAAc,CAACQ,MAAf,CAAsB,CAAtB,EAAyB3C,SAAzB,CAAjB;AACAmC,MAAAA,cAAc,CAACS,IAAf,EAAqB,aAAavL,IAAI,CAAC,MAAD,EAAS;AAC7CmH,QAAAA,SAAS,EAAElF,OAAO,CAACpB,GAD0B;AAE7C2K,QAAAA,QAAQ,EAAErD,gBAAgB,CAACC,IAAD;AAFmB,OAAT,EAGnC0C,cAAc,CAACC,MAHoB,CAAtC;AAID;AACF;;AAED,QAAMU,kBAAkB,GAAGR,MAAM,IAAI,aAAa/K,KAAK,CAAC,IAAD,EAAO;AAC5DsL,IAAAA,QAAQ,EAAE,CAAC,aAAaxL,IAAI,CAACoG,sBAAD,EAAyB;AACnDe,MAAAA,SAAS,EAAElF,OAAO,CAACJ,UADgC;AAEnDvB,MAAAA,UAAU,EAAEA,UAFuC;AAGnDoL,MAAAA,SAAS,EAAE,KAHwC;AAInDF,MAAAA,QAAQ,EAAEP,MAAM,CAACU;AAJkC,KAAzB,CAAlB,EAKN,aAAa3L,IAAI,CAACsG,mBAAD,EAAsB;AACzCa,MAAAA,SAAS,EAAElF,OAAO,CAACH,OADsB;AAEzCxB,MAAAA,UAAU,EAAEA,UAF6B;AAGzCkL,MAAAA,QAAQ,EAAEP,MAAM,CAACO;AAHwB,KAAtB,CALX;AADkD,GAAP,EAWpDP,MAAM,CAACW,GAX6C,CAAvD;;AAaA,QAAMvC,WAAW,GAAGC,eAAe,IAAImC,kBAAvC;;AAEA,QAAMI,mBAAmB,GAAG,CAACC,MAAD,EAASlK,MAAT,KAAoB,aAAa5B,IAAI,CAAC,IAAD,EAAOzB,QAAQ,CAAC,EAAD,EAAKuN,MAAL,EAAa;AAC3FN,IAAAA,QAAQ,EAAEnD,cAAc,CAACzG,MAAD;AADmE,GAAb,CAAf,CAAjE;;AAIA,QAAM4H,YAAY,GAAGC,gBAAgB,IAAIoC,mBAAzC;;AAEA,QAAME,gBAAgB,GAAG,CAACnK,MAAD,EAASuJ,KAAT,KAAmB;AAC1C,UAAMa,WAAW,GAAG5B,cAAc,CAAC;AACjCxI,MAAAA,MADiC;AAEjCuJ,MAAAA;AAFiC,KAAD,CAAlC;AAIA,WAAO3B,YAAY,CAACjL,QAAQ,CAAC,EAAD,EAAKyN,WAAL,EAAkB;AAC5C7E,MAAAA,SAAS,EAAElF,OAAO,CAACL;AADyB,KAAlB,CAAT,EAEfA,MAFe,EAEP;AACVsE,MAAAA,QAAQ,EAAE8F,WAAW,CAAC,eAAD,CADX;AAEVrB,MAAAA;AAFU,KAFO,CAAnB;AAMD,GAXD;;AAaA,SAAO,aAAazK,KAAK,CAAC1B,KAAK,CAACyN,QAAP,EAAiB;AACxCT,IAAAA,QAAQ,EAAE,CAAC,aAAaxL,IAAI,CAACoC,gBAAD,EAAmB7D,QAAQ,CAAC;AACtDsI,MAAAA,GAAG,EAAEA,GADiD;AAEtDM,MAAAA,SAAS,EAAEzI,IAAI,CAACuD,OAAO,CAACb,IAAT,EAAe+F,SAAf,CAFuC;AAGtD7G,MAAAA,UAAU,EAAEA;AAH0C,KAAD,EAIpDuJ,YAAY,CAACD,KAAD,CAJwC,EAI/B;AACtB4B,MAAAA,QAAQ,EAAEjC,WAAW,CAAC;AACpBgB,QAAAA,EADoB;AAEpBzC,QAAAA,QAFoB;AAGpBvH,QAAAA,SAAS,EAAE,IAHS;AAIpBK,QAAAA,IAAI,EAAEA,IAAI,KAAK,OAAT,GAAmB,OAAnB,GAA6BsL,SAJf;AAKpBC,QAAAA,eAAe,EAAEpC,kBAAkB,EALf;AAMpBqC,QAAAA,UAAU,EAAE;AACVvF,UAAAA,GAAG,EAAE6D,WADK;AAEVvD,UAAAA,SAAS,EAAElF,OAAO,CAACnB,SAFT;AAGVgK,UAAAA,cAHU;AAIV9J,UAAAA,YAAY,EAAE,aAAad,KAAK,CAACoD,wBAAD,EAA2B;AACzD6D,YAAAA,SAAS,EAAElF,OAAO,CAACjB,YADsC;AAEzDV,YAAAA,UAAU,EAAEA,UAF6C;AAGzDkL,YAAAA,QAAQ,EAAE,CAAChL,YAAY,GAAG,aAAaR,IAAI,CAACyD,0BAAD,EAA6BlF,QAAQ,CAAC,EAAD,EAAK0L,aAAa,EAAlB,EAAsB;AACpG,4BAAczC,SADsF;AAEpG6E,cAAAA,KAAK,EAAE7E,SAF6F;AAGpGL,cAAAA,SAAS,EAAElF,OAAO,CAAChB,cAHiF;AAIpGX,cAAAA,UAAU,EAAEA,UAJwF;AAKpGkL,cAAAA,QAAQ,EAAEpE;AAL0F,aAAtB,CAArC,CAApB,GAMjB,IANI,EAME3G,YAAY,GAAG,aAAaT,IAAI,CAAC2D,0BAAD,EAA6BpF,QAAQ,CAAC,EAAD,EAAKyL,sBAAsB,EAA3B,EAA+B;AAC9GlC,cAAAA,QAAQ,EAAEA,QADoG;AAE9G,4BAAcnH,SAAS,GAAG8G,SAAH,GAAewB,QAFwE;AAG9GoD,cAAAA,KAAK,EAAE1L,SAAS,GAAG8G,SAAH,GAAewB,QAH+E;AAI9G9B,cAAAA,SAAS,EAAEzI,IAAI,CAACuD,OAAO,CAACf,cAAT,CAJ+F;AAK9GZ,cAAAA,UAAU,EAAEA,UALkG;AAM9GkL,cAAAA,QAAQ,EAAEpC;AANoG,aAA/B,CAArC,CAApB,GAOlB,IAbI;AAH+C,WAA3B;AAJtB,SANQ;AA6BpBkD,QAAAA,UAAU,EAAE/N,QAAQ,CAAC;AACnB4I,UAAAA,SAAS,EAAEzI,IAAI,CAACuD,OAAO,CAAClB,KAAT,CADI;AAEnB+G,UAAAA;AAFmB,SAAD,EAGjBgC,aAAa,EAHI;AA7BA,OAAD;AADC,KAJ+B,CAA3B,CAAlB,EAuCLnJ,SAAS,IAAI8J,QAAb,GAAwB,aAAazK,IAAI,CAAC6D,kBAAD,EAAqB;AACjE0I,MAAAA,EAAE,EAAEpD,eAD6D;AAEjEhC,MAAAA,SAAS,EAAEzI,IAAI,CAACuD,OAAO,CAACF,MAAT,CAFkD;AAGjET,MAAAA,aAAa,EAAEA,aAHkD;AAIjEkL,MAAAA,KAAK,EAAE;AACLhK,QAAAA,KAAK,EAAEiI,QAAQ,GAAGA,QAAQ,CAACgC,WAAZ,GAA0B;AADpC,OAJ0D;AAOjEnM,MAAAA,UAAU,EAAEA,UAPqD;AAQjEoM,MAAAA,IAAI,EAAE,cAR2D;AASjEjC,MAAAA,QAAQ,EAAEA,QATuD;AAUjEkC,MAAAA,IAAI,EAAE,IAV2D;AAWjEnB,MAAAA,QAAQ,EAAE,aAAatL,KAAK,CAAC+D,iBAAD,EAAoB;AAC9CsI,QAAAA,EAAE,EAAErD,cAD0C;AAE9C/B,QAAAA,SAAS,EAAElF,OAAO,CAACT,KAF2B;AAG9ClB,QAAAA,UAAU,EAAEA,UAHkC;AAI9CkL,QAAAA,QAAQ,EAAE,CAAC9J,OAAO,IAAIkJ,cAAc,CAACG,MAAf,KAA0B,CAArC,GAAyC,aAAa/K,IAAI,CAACqE,mBAAD,EAAsB;AACzF8C,UAAAA,SAAS,EAAElF,OAAO,CAACP,OADsE;AAEzFpB,UAAAA,UAAU,EAAEA,UAF6E;AAGzFkL,UAAAA,QAAQ,EAAE1C;AAH+E,SAAtB,CAA1D,GAIN,IAJK,EAIC8B,cAAc,CAACG,MAAf,KAA0B,CAA1B,IAA+B,CAACzD,QAAhC,IAA4C,CAAC5F,OAA7C,GAAuD,aAAa1B,IAAI,CAAC0E,qBAAD,EAAwB;AACzGyC,UAAAA,SAAS,EAAElF,OAAO,CAACN,SADsF;AAEzGrB,UAAAA,UAAU,EAAEA,UAF6F;AAGzGoM,UAAAA,IAAI,EAAE,cAHmG;AAIzGE,UAAAA,WAAW,EAAEC,KAAK,IAAI;AACpB;AACAA,YAAAA,KAAK,CAACC,cAAN;AACD,WAPwG;AAQzGtB,UAAAA,QAAQ,EAAEzC;AAR+F,SAAxB,CAAxE,GASN,IAbK,EAaC6B,cAAc,CAACG,MAAf,GAAwB,CAAxB,GAA4B,aAAa/K,IAAI,CAAC2E,mBAAD,EAAsBpG,QAAQ,CAAC;AACrFgO,UAAAA,EAAE,EAAE3D,gBADiF;AAErFzB,UAAAA,SAAS,EAAElF,OAAO,CAACR,OAFkE;AAGrFnB,UAAAA,UAAU,EAAEA;AAHyE,SAAD,EAInF6J,eAAe,EAJoE,EAIhEtB,YAJgE,EAIlD;AAClC2C,UAAAA,QAAQ,EAAEZ,cAAc,CAACM,GAAf,CAAmB,CAACtJ,MAAD,EAASuJ,KAAT,KAAmB;AAC9C,gBAAI3C,OAAJ,EAAa;AACX,qBAAOa,WAAW,CAAC;AACjBuC,gBAAAA,GAAG,EAAEhK,MAAM,CAACgK,GADK;AAEjBD,gBAAAA,KAAK,EAAE/J,MAAM,CAAC+J,KAFG;AAGjBH,gBAAAA,QAAQ,EAAE5J,MAAM,CAACmL,OAAP,CAAe7B,GAAf,CAAmB,CAAC8B,OAAD,EAAUC,MAAV,KAAqBlB,gBAAgB,CAACiB,OAAD,EAAUpL,MAAM,CAACuJ,KAAP,GAAe8B,MAAzB,CAAxD;AAHO,eAAD,CAAlB;AAKD;;AAED,mBAAOlB,gBAAgB,CAACnK,MAAD,EAASuJ,KAAT,CAAvB;AACD,WAVS;AADwB,SAJkD,CAA9B,CAA7C,GAgBL,IA7BI;AAJoC,OAApB;AAXqC,KAArB,CAAzC,GA8CA,IArFK;AAD8B,GAAjB,CAAzB;AAwFD,CA7PiC,CAAlC;AA8PA+B,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC1G,YAAY,CAAC2G;AACrD;AADwC,EAEtC;AACA;AACA;AACA;AACA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACEvG,EAAAA,YAAY,EAAErI,SAAS,CAAC6O,IAZxB;;AAcA;AACF;AACA;AACA;AACEvG,EAAAA,aAAa,EAAEtI,SAAS,CAAC6O,IAlBzB;;AAoBA;AACF;AACA;AACA;AACA;AACA;AACEtG,EAAAA,UAAU,EAAEvI,SAAS,CAAC6O,IA1BtB;;AA4BA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACErG,EAAAA,YAAY,EAAExI,SAAS,CAAC8O,SAAV,CAAoB,CAAC9O,SAAS,CAAC+O,KAAV,CAAgB,CAAC,OAAD,EAAU,OAAV,CAAhB,CAAD,EAAsC/O,SAAS,CAAC6O,IAAhD,CAApB,CArCd;;AAuCA;AACF;AACA;AACEpG,EAAAA,SAAS,EAAEzI,SAAS,CAACgP,MA1CrB;;AA4CA;AACF;AACA;AACExL,EAAAA,OAAO,EAAExD,SAAS,CAACgP,MA/CnB;;AAiDA;AACF;AACA;AACEtG,EAAAA,SAAS,EAAE1I,SAAS,CAACiP,MApDrB;;AAsDA;AACF;AACA;AACA;AACEtG,EAAAA,SAAS,EAAE3I,SAAS,CAACkP,IA1DrB;;AA4DA;AACF;AACA;AACA;AACA;AACA;AACA;AACEtG,EAAAA,WAAW,EAAE5I,SAAS,CAAC6O,IAnEvB;;AAqEA;AACF;AACA;AACA;AACE/F,EAAAA,aAAa,EAAE9I,SAAS,CAAC6O,IAzEzB;;AA2EA;AACF;AACA;AACA;AACA;AACA;AACE9F,EAAAA,SAAS,EAAE/I,SAAS,CAACiP,MAjFrB;;AAmFA;AACF;AACA;AACA;AACA;AACA;AACEjG,EAAAA,SAAS,EAAEhJ,SAAS,CAACiP,MAzFrB;;AA2FA;AACF;AACA;AACA;AACEhG,EAAAA,YAAY,EAAEjJ,SAAS,CAACmP,GA/FxB;;AAiGA;AACF;AACA;AACA;AACEhG,EAAAA,gBAAgB,EAAEnJ,SAAS,CAAC6O,IArG5B;;AAuGA;AACF;AACA;AACA;AACEzF,EAAAA,oBAAoB,EAAEpJ,SAAS,CAAC6O,IA3GhC;;AA6GA;AACF;AACA;AACA;AACExF,EAAAA,QAAQ,EAAErJ,SAAS,CAAC6O,IAjHpB;;AAmHA;AACF;AACA;AACA;AACEvF,EAAAA,sBAAsB,EAAEtJ,SAAS,CAAC6O,IAvHlC;;AAyHA;AACF;AACA;AACA;AACEtF,EAAAA,eAAe,EAAEvJ,SAAS,CAAC6O,IA7H3B;;AA+HA;AACF;AACA;AACA;AACEhM,EAAAA,aAAa,EAAE7C,SAAS,CAAC6O,IAnIzB;;AAqIA;AACF;AACA;AACA;AACA;AACA;AACA;AACEO,EAAAA,aAAa,EAAEpP,SAAS,CAACqP,IA5IzB;;AA8IA;AACF;AACA;AACA;AACE7F,EAAAA,qBAAqB,EAAExJ,SAAS,CAAC6O,IAlJjC;;AAoJA;AACF;AACA;AACA;AACEpF,EAAAA,cAAc,EAAEzJ,SAAS,CAAC8O,SAAV,CAAoB,CAAC9O,SAAS,CAAC+O,KAAV,CAAgB,CAAC,MAAD,CAAhB,CAAD,EAA4B/O,SAAS,CAAC6O,IAAtC,CAApB,CAxJhB;;AA0JA;AACF;AACA;AACA;AACEhG,EAAAA,QAAQ,EAAE7I,SAAS,CAAC6O,IA9JpB;;AAgKA;AACF;AACA;AACA;AACE/M,EAAAA,SAAS,EAAE9B,SAAS,CAAC6O,IApKrB;;AAsKA;AACF;AACA;AACA;AACA;AACA;AACA;AACEnF,EAAAA,gBAAgB,EAAE1J,SAAS,CAACqP,IA7K5B;;AA+KA;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,iBAAiB,EAAEtP,SAAS,CAACqP,IArL7B;;AAuLA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEzF,EAAAA,cAAc,EAAE5J,SAAS,CAACqP,IA/L1B;;AAiMA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEE,EAAAA,iBAAiB,EAAEvP,SAAS,CAACqP,IA1M7B;;AA4MA;AACF;AACA;AACA;AACA;AACA;AACA;AACEtF,EAAAA,OAAO,EAAE/J,SAAS,CAACqP,IAnNnB;;AAqNA;AACF;AACA;AACA;AACA;AACErF,EAAAA,iBAAiB,EAAEhK,SAAS,CAAC6O,IA1N7B;;AA4NA;AACF;AACA;AACA;AACE/C,EAAAA,EAAE,EAAE9L,SAAS,CAACiP,MAhOd;;AAkOA;AACF;AACA;AACA;AACEhF,EAAAA,kBAAkB,EAAEjK,SAAS,CAAC6O,IAtO9B;;AAwOA;AACF;AACA;AACE3C,EAAAA,UAAU,EAAElM,SAAS,CAACiP,MA3OtB;;AA6OA;AACF;AACA;AACA;AACA;AACE/E,EAAAA,SAAS,EAAE/J,eAlPX;;AAoPA;AACF;AACA;AACA;AACEgK,EAAAA,gBAAgB,EAAEnK,SAAS,CAACwP,WAxP5B;;AA0PA;AACF;AACA;AACEpF,EAAAA,YAAY,EAAEpK,SAAS,CAACgP,MA7PxB;;AA+PA;AACF;AACA;AACA;AACE/L,EAAAA,OAAO,EAAEjD,SAAS,CAAC6O,IAnQnB;;AAqQA;AACF;AACA;AACA;AACA;AACA;AACExE,EAAAA,WAAW,EAAErK,SAAS,CAACkP,IA3QvB;;AA6QA;AACF;AACA;AACA;AACEhG,EAAAA,QAAQ,EAAElJ,SAAS,CAAC6O,IAjRpB;;AAmRA;AACF;AACA;AACA;AACA;AACA;AACEvE,EAAAA,aAAa,EAAEtK,SAAS,CAACkP,IAzRzB;;AA2RA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEO,EAAAA,QAAQ,EAAEzP,SAAS,CAACqP,IAnSpB;;AAqSA;AACF;AACA;AACA;AACA;AACA;AACA;AACEK,EAAAA,OAAO,EAAE1P,SAAS,CAACqP,IA5SnB;;AA8SA;AACF;AACA;AACA;AACA;AACA;AACA;AACEM,EAAAA,iBAAiB,EAAE3P,SAAS,CAACqP,IArT7B;;AAuTA;AACF;AACA;AACA;AACA;AACA;AACA;AACEO,EAAAA,aAAa,EAAE5P,SAAS,CAACqP,IA9TzB;;AAgUA;AACF;AACA;AACA;AACA;AACA;AACEQ,EAAAA,MAAM,EAAE7P,SAAS,CAACqP,IAtUlB;;AAwUA;AACF;AACA;AACEnB,EAAAA,IAAI,EAAElO,SAAS,CAAC6O,IA3UhB;;AA6UA;AACF;AACA;AACA;AACEtE,EAAAA,WAAW,EAAEvK,SAAS,CAAC6O,IAjVvB;;AAmVA;AACF;AACA;AACA;AACA;AACA;AACErE,EAAAA,QAAQ,EAAExK,SAAS,CAACiP,MAzVpB;;AA2VA;AACF;AACA;AACEX,EAAAA,OAAO,EAAEtO,SAAS,CAAC8P,KAAV,CAAgBC,UA9VzB;;AAgWA;AACF;AACA;AACA;AACEtF,EAAAA,cAAc,EAAEzK,SAAS,CAACwP,WApW1B;;AAsWA;AACF;AACA;AACA;AACE9E,EAAAA,eAAe,EAAE1K,SAAS,CAACwP,WA1W3B;;AA4WA;AACF;AACA;AACA;AACE7E,EAAAA,SAAS,EAAE3K,SAAS,CAACkP,IAhXrB;;AAkXA;AACF;AACA;AACA;AACA;AACA;AACEtE,EAAAA,WAAW,EAAE5K,SAAS,CAACqP,IAxXvB;;AA0XA;AACF;AACA;AACA;AACA;AACA;AACEvE,EAAAA,WAAW,EAAE9K,SAAS,CAACqP,IAAV,CAAeU,UAhY5B;;AAkYA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEhF,EAAAA,YAAY,EAAE/K,SAAS,CAACqP,IA1YxB;;AA4YA;AACF;AACA;AACA;AACA;AACA;AACA;AACEpE,EAAAA,UAAU,EAAEjL,SAAS,CAACqP,IAnZtB;;AAqZA;AACF;AACA;AACA;AACA;AACEnE,EAAAA,aAAa,EAAElL,SAAS,CAAC6O,IA1ZzB;;AA4ZA;AACF;AACA;AACA;AACE1M,EAAAA,IAAI,EAAEnC,SAAS,CAAC+O,KAAV,CAAgB,CAAC,QAAD,EAAW,OAAX,CAAhB,CAhaN;;AAkaA;AACF;AACA;AACEiB,EAAAA,EAAE,EAAEhQ,SAAS,CAACgP,MArad;;AAuaA;AACF;AACA;AACA;AACA;AACA;AACEpD,EAAAA,KAAK,EAAE1L,cAAc,CAACF,SAAS,CAACmP,GAAX,EAAgBxN,KAAK,IAAI;AAC5C,QAAIA,KAAK,CAACuH,QAAN,IAAkBvH,KAAK,CAACiK,KAAN,KAAgB6B,SAAlC,IAA+C,CAACd,KAAK,CAACC,OAAN,CAAcjL,KAAK,CAACiK,KAApB,CAApD,EAAgF;AAC9E,aAAO,IAAIqE,KAAJ,CAAU,CAAC,qFAAD,EAAyF,YAAWtO,KAAK,CAACiK,KAAM,gBAAhH,EAAiIsE,IAAjI,CAAsI,IAAtI,CAAV,CAAP;AACD;;AAED,WAAO,IAAP;AACD,GANoB;AA7arB,CAFF,GAsbI,KAAK,CAtbT;AAubA,eAAejI,YAAf","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes, integerPropType, deepmerge } from '@material-ui/utils';\nimport { unstable_composeClasses as composeClasses } from '@material-ui/unstyled';\nimport { alpha } from '../styles/colorManipulator';\nimport Popper from '../Popper';\nimport ListSubheader from '../ListSubheader';\nimport Paper from '../Paper';\nimport IconButton from '../IconButton';\nimport Chip from '../Chip';\nimport ClearIcon from '../internal/svg-icons/Close';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport useAutocomplete, { createFilterOptions } from '../useAutocomplete';\nimport useThemeProps from '../styles/useThemeProps';\nimport experimentalStyled from '../styles/experimentalStyled';\nimport autocompleteClasses, { getAutocompleteUtilityClass } from './autocompleteClasses';\nimport capitalize from '../utils/capitalize';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst overridesResolver = (props, styles) => {\n  const {\n    styleProps\n  } = props;\n  const {\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused,\n    popupOpen,\n    size\n  } = styleProps;\n  return deepmerge(_extends({}, fullWidth && styles.fullWidth, hasPopupIcon && styles.hasPopupIcon, hasClearIcon && styles.hasClearIcon, {\n    [`& .${autocompleteClasses.tag}`]: _extends({}, styles.tag, styles[`tagSize${capitalize(size)}`]),\n    [`& .${autocompleteClasses.inputRoot}`]: styles.inputRoot,\n    [`& .${autocompleteClasses.input}`]: _extends({}, styles.input, inputFocused && styles.inputFocused),\n    [`& .${autocompleteClasses.endAdornment}`]: styles.endAdornment,\n    [`& .${autocompleteClasses.clearIndicator}`]: styles.clearIndicator,\n    [`& .${autocompleteClasses.popupIndicator}`]: _extends({}, styles.popupIndicator, popupOpen && styles.popupIndicatorOpen)\n  }), styles.root || {});\n};\n\nconst overridesResolverPortal = (props, styles) => {\n  const {\n    styleProps\n  } = props;\n  return deepmerge(_extends({}, styleProps.disablePortal && styles.popperDisablePortal, {\n    [`& .${autocompleteClasses.paper}`]: styles.paper,\n    [`& .${autocompleteClasses.listbox}`]: styles.listbox,\n    [`& .${autocompleteClasses.loading}`]: styles.loading,\n    [`& .${autocompleteClasses.noOptions}`]: styles.noOptions,\n    [`& .${autocompleteClasses.option}`]: styles.option,\n    [`& .${autocompleteClasses.groupLabel}`]: styles.groupLabel,\n    [`& .${autocompleteClasses.groupUl}`]: styles.groupUl\n  }), styles.popper || {});\n};\n\nconst useUtilityClasses = styleProps => {\n  const {\n    classes,\n    disablePortal,\n    focused,\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused,\n    popupOpen,\n    size\n  } = styleProps;\n  const slots = {\n    root: ['root', focused && 'focused', fullWidth && 'fullWidth', hasClearIcon && 'hasClearIcon', hasPopupIcon && 'hasPopupIcon'],\n    inputRoot: ['inputRoot'],\n    input: ['input', inputFocused && 'inputFocused'],\n    tag: ['tag', `tagSize${capitalize(size)})`],\n    endAdornment: ['endAdornment'],\n    clearIndicator: ['clearIndicator'],\n    popupIndicator: ['popupIndicator', popupOpen && 'popupIndicatorOpen'],\n    popper: ['popper', disablePortal && 'popperDisablePortal'],\n    paper: ['paper'],\n    listbox: ['listbox'],\n    loading: ['loading'],\n    noOptions: ['noOptions'],\n    option: ['option'],\n    groupLabel: ['groupLabel'],\n    groupUl: ['groupUl']\n  };\n  return composeClasses(slots, getAutocompleteUtilityClass, classes);\n};\n\nconst AutocompleteRoot = experimentalStyled('div', {}, {\n  name: 'MuiAutocomplete',\n  slot: 'Root',\n  overridesResolver\n})(({\n  styleProps\n}) => _extends({\n  /* Styles applied to the root element. */\n  [`&.Mui-focused .${autocompleteClasses.clearIndicator}`]: {\n    visibility: 'visible'\n  },\n\n  /* Avoid double tap issue on iOS */\n  '@media (pointer: fine)': {\n    [`&:hover .${autocompleteClasses.clearIndicator}`]: {\n      visibility: 'visible'\n    }\n  }\n}, styleProps.fullWidth && {\n  width: '100%'\n}, {\n  /* Styles applied to the tag elements, e.g. the chips. */\n  [`& .${autocompleteClasses.tag}`]: _extends({\n    margin: 3,\n    maxWidth: 'calc(100% - 6px)'\n  }, styleProps.size === 'small' && {\n    margin: 2,\n    maxWidth: 'calc(100% - 4px)'\n  }),\n\n  /* Styles applied to the Input element. */\n  [`& .${autocompleteClasses.inputRoot}`]: {\n    flexWrap: 'wrap',\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4\n    },\n    [`& .${autocompleteClasses.input}`]: {\n      width: 0,\n      minWidth: 30\n    },\n    '&.MuiInput-root': {\n      paddingBottom: 1,\n      '& .MuiInput-input': {\n        padding: '6px 4px 6px 0px'\n      }\n    },\n    '&.MuiInput-root.MuiInputBase-sizeSmall': {\n      '& .MuiInput-input': {\n        padding: '2px 4px 3px 0'\n      }\n    },\n    '&.MuiOutlinedInput-root': {\n      padding: 9,\n      [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n        paddingRight: 26 + 4 + 9\n      },\n      [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n        paddingRight: 52 + 4 + 9\n      },\n      [`& .${autocompleteClasses.input}`]: {\n        padding: '7.5px 4px 7.5px 6px'\n      },\n      [`& .${autocompleteClasses.endAdornment}`]: {\n        right: 9\n      }\n    },\n    '&.MuiOutlinedInput-root.MuiInputBase-sizeSmall': {\n      padding: 6,\n      [`& .${autocompleteClasses.input}`]: {\n        padding: '2.5px 4px 2.5px 6px'\n      }\n    },\n    '&.MuiFilledInput-root': {\n      paddingTop: 19,\n      paddingLeft: 8,\n      [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n        paddingRight: 26 + 4 + 9\n      },\n      [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n        paddingRight: 52 + 4 + 9\n      },\n      '& .MuiFilledInput-input': {\n        padding: '7px 4px'\n      },\n      [`& .${autocompleteClasses.endAdornment}`]: {\n        right: 9\n      }\n    },\n    '&.MuiFilledInput-root.MuiInputBase-sizeSmall': {\n      paddingBottom: 1,\n      '& .MuiFilledInput-input': {\n        padding: '2.5px 4px'\n      }\n    }\n  },\n\n  /* Styles applied to the input element. */\n  [`& .${autocompleteClasses.input}`]: _extends({\n    flexGrow: 1,\n    textOverflow: 'ellipsis',\n    opacity: 0\n  }, styleProps.inputFocused && {\n    opacity: 1\n  })\n}));\nconst AutocompleteEndAdornment = experimentalStyled('div', {}, {\n  name: 'MuiAutocomplete',\n  slot: 'EndAdornment'\n})({\n  /* Styles applied to the endAdornment element. */\n  // We use a position absolute to support wrapping tags.\n  position: 'absolute',\n  right: 0,\n  top: 'calc(50% - 14px)' // Center vertically\n\n});\nconst AutocompleteClearIndicator = experimentalStyled(IconButton, {}, {\n  name: 'MuiAutocomplete',\n  slot: 'ClearIndicator'\n})({\n  /* Styles applied to the clear indicator. */\n  marginRight: -2,\n  padding: 4,\n  visibility: 'hidden'\n});\nconst AutocompletePopupIndicator = experimentalStyled(IconButton, {}, {\n  name: 'MuiAutocomplete',\n  slot: 'PopupIndicator'\n})(({\n  styleProps\n}) => _extends({\n  /* Styles applied to the popup indicator. */\n  padding: 2,\n  marginRight: -2\n}, styleProps.popupOpen && {\n  transform: 'rotate(180deg)'\n}));\nconst AutocompletePopper = experimentalStyled(Popper, {}, {\n  name: 'MuiAutocomplete',\n  slot: 'Popper',\n  overridesResolver: overridesResolverPortal\n})(({\n  theme,\n  styleProps\n}) => _extends({\n  /* Styles applied to the popper element. */\n  zIndex: theme.zIndex.modal\n}, styleProps.disablePortal && {\n  position: 'absolute'\n}));\nconst AutocompletePaper = experimentalStyled(Paper, {}, {\n  name: 'MuiAutocomplete',\n  slot: 'Paper'\n})(({\n  theme\n}) => _extends({}, theme.typography.body1, {\n  overflow: 'auto',\n  margin: '4px 0'\n}));\nconst AutocompleteLoading = experimentalStyled('div', {}, {\n  name: 'MuiAutocomplete',\n  slot: 'Loading'\n})(({\n  theme\n}) => ({\n  /* Styles applied to the loading wrapper. */\n  color: theme.palette.text.secondary,\n  padding: '14px 16px'\n}));\nconst AutocompleteNoOptions = experimentalStyled('div', {}, {\n  name: 'MuiAutocomplete',\n  slot: 'NoOptions'\n})(({\n  theme\n}) => ({\n  /* Styles applied to the no option wrapper. */\n  color: theme.palette.text.secondary,\n  padding: '14px 16px'\n}));\nconst AutocompleteListbox = experimentalStyled('div', {}, {\n  name: 'MuiAutocomplete',\n  slot: 'Listbox'\n})(({\n  theme\n}) => ({\n  /* Styles applied to the listbox component. */\n  listStyle: 'none',\n  margin: 0,\n  padding: '8px 0',\n  maxHeight: '40vh',\n  overflow: 'auto',\n\n  /* Styles applied to the option elements. */\n  [`& .${autocompleteClasses.option}`]: {\n    minHeight: 48,\n    display: 'flex',\n    overflow: 'hidden',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    cursor: 'pointer',\n    paddingTop: 6,\n    boxSizing: 'border-box',\n    outline: '0',\n    WebkitTapHighlightColor: 'transparent',\n    paddingBottom: 6,\n    paddingLeft: 16,\n    paddingRight: 16,\n    [theme.breakpoints.up('sm')]: {\n      minHeight: 'auto'\n    },\n    '&[data-focus=\"true\"]': {\n      backgroundColor: theme.palette.action.hover,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    },\n    '&[aria-disabled=\"true\"]': {\n      opacity: theme.palette.action.disabledOpacity,\n      pointerEvents: 'none'\n    },\n    '&.Mui-focusVisible': {\n      backgroundColor: theme.palette.action.focus\n    },\n    '&[aria-selected=\"true\"]': {\n      backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n      '&[data-focus=\"true\"]': {\n        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: theme.palette.action.selected\n        }\n      },\n      '&.Mui-focusVisible': {\n        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)\n      }\n    }\n  }\n}));\nconst AutocompleteGroupLabel = experimentalStyled(ListSubheader, {}, {\n  name: 'MuiAutocomplete',\n  slot: 'GroupLabel'\n})(({\n  theme\n}) => ({\n  /* Styles applied to the group's label elements. */\n  backgroundColor: theme.palette.background.paper,\n  top: -8\n}));\nconst AutocompleteGroupUl = experimentalStyled('ul', {}, {\n  name: 'MuiAutocomplete',\n  slot: 'GroupUl'\n})({\n  /* Styles applied to the group's ul elements. */\n  padding: 0,\n  [`& .${autocompleteClasses.option}`]: {\n    paddingLeft: 24\n  }\n});\nexport { createFilterOptions };\n\nvar _ref = /*#__PURE__*/_jsx(ClearIcon, {\n  fontSize: \"small\"\n});\n\nvar _ref2 = /*#__PURE__*/_jsx(ArrowDropDownIcon, {});\n\nconst Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiAutocomplete'\n  });\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n\n  const {\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    ChipProps,\n    className,\n    clearIcon = _ref,\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    clearText = 'Clear',\n    closeText = 'Close',\n    defaultValue = props.multiple ? [] : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled = false,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    disablePortal = false,\n    filterSelectedOptions = false,\n    forcePopupIcon = 'auto',\n    freeSolo = false,\n    fullWidth = false,\n    getLimitTagsText = more => `+${more}`,\n    getOptionLabel = option => {\n      var _option$label;\n\n      return (_option$label = option.label) !== null && _option$label !== void 0 ? _option$label : option;\n    },\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    includeInputInList = false,\n    limitTags = -1,\n    ListboxComponent = 'ul',\n    ListboxProps,\n    loading = false,\n    loadingText = 'Loading…',\n    multiple = false,\n    noOptionsText = 'No options',\n    openOnFocus = false,\n    openText = 'Open',\n    PaperComponent = Paper,\n    PopperComponent = Popper,\n    popupIcon = _ref2,\n    renderGroup: renderGroupProp,\n    renderInput,\n    renderOption: renderOptionProp,\n    renderTags,\n    selectOnFocus = !props.freeSolo,\n    size = 'medium'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"autoComplete\", \"autoHighlight\", \"autoSelect\", \"blurOnSelect\", \"ChipProps\", \"className\", \"clearIcon\", \"clearOnBlur\", \"clearOnEscape\", \"clearText\", \"closeText\", \"defaultValue\", \"disableClearable\", \"disableCloseOnSelect\", \"disabled\", \"disabledItemsFocusable\", \"disableListWrap\", \"disablePortal\", \"filterOptions\", \"filterSelectedOptions\", \"forcePopupIcon\", \"freeSolo\", \"fullWidth\", \"getLimitTagsText\", \"getOptionDisabled\", \"getOptionLabel\", \"getOptionSelected\", \"groupBy\", \"handleHomeEndKeys\", \"id\", \"includeInputInList\", \"inputValue\", \"limitTags\", \"ListboxComponent\", \"ListboxProps\", \"loading\", \"loadingText\", \"multiple\", \"noOptionsText\", \"onChange\", \"onClose\", \"onHighlightChange\", \"onInputChange\", \"onOpen\", \"open\", \"openOnFocus\", \"openText\", \"options\", \"PaperComponent\", \"PopperComponent\", \"popupIcon\", \"renderGroup\", \"renderInput\", \"renderOption\", \"renderTags\", \"selectOnFocus\", \"size\", \"value\"]);\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n\n  const {\n    getRootProps,\n    getInputProps,\n    getInputLabelProps,\n    getPopupIndicatorProps,\n    getClearProps,\n    getTagProps,\n    getListboxProps,\n    getOptionProps,\n    value,\n    dirty,\n    id,\n    popupOpen,\n    focused,\n    focusedTag,\n    anchorEl,\n    setAnchorEl,\n    inputValue,\n    groupedOptions\n  } = useAutocomplete(_extends({}, props, {\n    componentName: 'Autocomplete'\n  }));\n  const hasClearIcon = !disableClearable && !disabled && dirty;\n  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n\n  const styleProps = _extends({}, props, {\n    disablePortal,\n    focused,\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused: focusedTag === -1,\n    popupOpen,\n    size\n  });\n\n  const classes = useUtilityClasses(styleProps);\n  let startAdornment;\n\n  if (multiple && value.length > 0) {\n    const getCustomizedTagProps = params => _extends({\n      className: clsx(classes.tag),\n      disabled\n    }, getTagProps(params));\n\n    if (renderTags) {\n      startAdornment = renderTags(value, getCustomizedTagProps);\n    } else {\n      startAdornment = value.map((option, index) => /*#__PURE__*/_jsx(Chip, _extends({\n        label: getOptionLabel(option),\n        size: size\n      }, getCustomizedTagProps({\n        index\n      }), ChipProps)));\n    }\n  }\n\n  if (limitTags > -1 && Array.isArray(startAdornment)) {\n    const more = startAdornment.length - limitTags;\n\n    if (!focused && more > 0) {\n      startAdornment = startAdornment.splice(0, limitTags);\n      startAdornment.push( /*#__PURE__*/_jsx(\"span\", {\n        className: classes.tag,\n        children: getLimitTagsText(more)\n      }, startAdornment.length));\n    }\n  }\n\n  const defaultRenderGroup = params => /*#__PURE__*/_jsxs(\"li\", {\n    children: [/*#__PURE__*/_jsx(AutocompleteGroupLabel, {\n      className: classes.groupLabel,\n      styleProps: styleProps,\n      component: \"div\",\n      children: params.group\n    }), /*#__PURE__*/_jsx(AutocompleteGroupUl, {\n      className: classes.groupUl,\n      styleProps: styleProps,\n      children: params.children\n    })]\n  }, params.key);\n\n  const renderGroup = renderGroupProp || defaultRenderGroup;\n\n  const defaultRenderOption = (props2, option) => /*#__PURE__*/_jsx(\"li\", _extends({}, props2, {\n    children: getOptionLabel(option)\n  }));\n\n  const renderOption = renderOptionProp || defaultRenderOption;\n\n  const renderListOption = (option, index) => {\n    const optionProps = getOptionProps({\n      option,\n      index\n    });\n    return renderOption(_extends({}, optionProps, {\n      className: classes.option\n    }), option, {\n      selected: optionProps['aria-selected'],\n      inputValue\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(AutocompleteRoot, _extends({\n      ref: ref,\n      className: clsx(classes.root, className),\n      styleProps: styleProps\n    }, getRootProps(other), {\n      children: renderInput({\n        id,\n        disabled,\n        fullWidth: true,\n        size: size === 'small' ? 'small' : undefined,\n        InputLabelProps: getInputLabelProps(),\n        InputProps: {\n          ref: setAnchorEl,\n          className: classes.inputRoot,\n          startAdornment,\n          endAdornment: /*#__PURE__*/_jsxs(AutocompleteEndAdornment, {\n            className: classes.endAdornment,\n            styleProps: styleProps,\n            children: [hasClearIcon ? /*#__PURE__*/_jsx(AutocompleteClearIndicator, _extends({}, getClearProps(), {\n              \"aria-label\": clearText,\n              title: clearText,\n              className: classes.clearIndicator,\n              styleProps: styleProps,\n              children: clearIcon\n            })) : null, hasPopupIcon ? /*#__PURE__*/_jsx(AutocompletePopupIndicator, _extends({}, getPopupIndicatorProps(), {\n              disabled: disabled,\n              \"aria-label\": popupOpen ? closeText : openText,\n              title: popupOpen ? closeText : openText,\n              className: clsx(classes.popupIndicator),\n              styleProps: styleProps,\n              children: popupIcon\n            })) : null]\n          })\n        },\n        inputProps: _extends({\n          className: clsx(classes.input),\n          disabled\n        }, getInputProps())\n      })\n    })), popupOpen && anchorEl ? /*#__PURE__*/_jsx(AutocompletePopper, {\n      as: PopperComponent,\n      className: clsx(classes.popper),\n      disablePortal: disablePortal,\n      style: {\n        width: anchorEl ? anchorEl.clientWidth : null\n      },\n      styleProps: styleProps,\n      role: \"presentation\",\n      anchorEl: anchorEl,\n      open: true,\n      children: /*#__PURE__*/_jsxs(AutocompletePaper, {\n        as: PaperComponent,\n        className: classes.paper,\n        styleProps: styleProps,\n        children: [loading && groupedOptions.length === 0 ? /*#__PURE__*/_jsx(AutocompleteLoading, {\n          className: classes.loading,\n          styleProps: styleProps,\n          children: loadingText\n        }) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/_jsx(AutocompleteNoOptions, {\n          className: classes.noOptions,\n          styleProps: styleProps,\n          role: \"presentation\",\n          onMouseDown: event => {\n            // Prevent input blur when interacting with the \"no options\" content\n            event.preventDefault();\n          },\n          children: noOptionsText\n        }) : null, groupedOptions.length > 0 ? /*#__PURE__*/_jsx(AutocompleteListbox, _extends({\n          as: ListboxComponent,\n          className: classes.listbox,\n          styleProps: styleProps\n        }, getListboxProps(), ListboxProps, {\n          children: groupedOptions.map((option, index) => {\n            if (groupBy) {\n              return renderGroup({\n                key: option.key,\n                group: option.group,\n                children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))\n              });\n            }\n\n            return renderListOption(option, index);\n          })\n        })) : null]\n      })\n    }) : null]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the portion of the selected suggestion that has not been typed by the user,\n   * known as the completion string, appears inline after the input cursor in the textbox.\n   * The inline completion string is visually highlighted and has a selected state.\n   * @default false\n   */\n  autoComplete: PropTypes.bool,\n\n  /**\n   * If `true`, the first option is automatically highlighted.\n   * @default false\n   */\n  autoHighlight: PropTypes.bool,\n\n  /**\n   * If `true`, the selected option becomes the value of the input\n   * when the Autocomplete loses focus unless the user chooses\n   * a different option or changes the character string in the input.\n   * @default false\n   */\n  autoSelect: PropTypes.bool,\n\n  /**\n   * Control if the input should be blurred when an option is selected:\n   *\n   * - `false` the input is not blurred.\n   * - `true` the input is always blurred.\n   * - `touch` the input is blurred after a touch event.\n   * - `mouse` the input is blurred after a mouse event.\n   * @default false\n   */\n  blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\n\n  /**\n   * Props applied to the [`Chip`](/api/chip/) element.\n   */\n  ChipProps: PropTypes.object,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The icon to display in place of the default clear icon.\n   * @default <ClearIcon fontSize=\"small\" />\n   */\n  clearIcon: PropTypes.node,\n\n  /**\n   * If `true`, the input's text is cleared on blur if no value is selected.\n   *\n   * Set to `true` if you want to help the user enter a new value.\n   * Set to `false` if you want to help the user resume his search.\n   * @default !props.freeSolo\n   */\n  clearOnBlur: PropTypes.bool,\n\n  /**\n   * If `true`, clear all values when the user presses escape and the popup is closed.\n   * @default false\n   */\n  clearOnEscape: PropTypes.bool,\n\n  /**\n   * Override the default text for the *clear* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Clear'\n   */\n  clearText: PropTypes.string,\n\n  /**\n   * Override the default text for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n\n  /**\n   * The default value. Use when the component is not controlled.\n   * @default props.multiple ? [] : null\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the input can't be cleared.\n   * @default false\n   */\n  disableClearable: PropTypes.bool,\n\n  /**\n   * If `true`, the popup won't close when a value is selected.\n   * @default false\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable: PropTypes.bool,\n\n  /**\n   * If `true`, the list box in the popup will not wrap focus.\n   * @default false\n   */\n  disableListWrap: PropTypes.bool,\n\n  /**\n   * If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\n   * A filter function that determines the options that are eligible.\n   *\n   * @param {T[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {T[]}\n   */\n  filterOptions: PropTypes.func,\n\n  /**\n   * If `true`, hide the selected options from the list box.\n   * @default false\n   */\n  filterSelectedOptions: PropTypes.bool,\n\n  /**\n   * Force the visibility display of the popup icon.\n   * @default 'auto'\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   * @default false\n   */\n  freeSolo: PropTypes.bool,\n\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The label to display when the tags are truncated (`limitTags`).\n   *\n   * @param {number} more The number of truncated tags.\n   * @returns {ReactNode}\n   * @default (more) => `+${more}`\n   */\n  getLimitTagsText: PropTypes.func,\n\n  /**\n   * Used to determine the disabled state for a given option.\n   *\n   * @param {T} option The option to test.\n   * @returns {boolean}\n   */\n  getOptionDisabled: PropTypes.func,\n\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   *\n   * @param {T} option\n   * @returns {string}\n   * @default (option) => option.label ?? option\n   */\n  getOptionLabel: PropTypes.func,\n\n  /**\n   * Used to determine if an option is selected, considering the current value(s).\n   * Uses strict equality by default.\n   * ⚠️ Both arguments need to be handled, an option can only match with one value.\n   *\n   * @param {T} option The option to test.\n   * @param {T} value The value to test against.\n   * @returns {boolean}\n   */\n  getOptionSelected: PropTypes.func,\n\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {T} options The options to group.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n\n  /**\n   * If `true`, the component handles the \"Home\" and \"End\" keys when the popup is open.\n   * It should move focus to the first option and last option, respectively.\n   * @default !props.freeSolo\n   */\n  handleHomeEndKeys: PropTypes.bool,\n\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide this prop. It falls back to a randomly generated id.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the highlight can move to the input.\n   * @default false\n   */\n  includeInputInList: PropTypes.bool,\n\n  /**\n   * The input value.\n   */\n  inputValue: PropTypes.string,\n\n  /**\n   * The maximum number of tags that will be visible when not focused.\n   * Set `-1` to disable the limit.\n   * @default -1\n   */\n  limitTags: integerPropType,\n\n  /**\n   * The component used to render the listbox.\n   * @default 'ul'\n   */\n  ListboxComponent: PropTypes.elementType,\n\n  /**\n   * Props applied to the Listbox element.\n   */\n  ListboxProps: PropTypes.object,\n\n  /**\n   * If `true`, the component is in a loading state.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Text to display when in a loading state.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Loading…'\n   */\n  loadingText: PropTypes.node,\n\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * Text to display when there are no options.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'No options'\n   */\n  noOptionsText: PropTypes.node,\n\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {T|T[]} value The new value of the component.\n   * @param {string} reason One of \"create-option\", \"select-option\", \"remove-option\", \"blur\" or \"clear\".\n   * @param {string} [details]\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"select-option\"`, `\"remove-option\"`, `\"blur\"`.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the highlight option changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {T} option The highlighted option.\n   * @param {string} reason Can be: `\"keyboard\"`, `\"auto\"`, `\"mouse\"`.\n   */\n  onHighlightChange: PropTypes.func,\n\n  /**\n   * Callback fired when the input value changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} value The new value of the text input.\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`.\n   */\n  onInputChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * If `true`, the popup will open on input focus.\n   * @default false\n   */\n  openOnFocus: PropTypes.bool,\n\n  /**\n   * Override the default text for the *open popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Open'\n   */\n  openText: PropTypes.string,\n\n  /**\n   * Array of options.\n   */\n  options: PropTypes.array.isRequired,\n\n  /**\n   * The component used to render the body of the popup.\n   * @default Paper\n   */\n  PaperComponent: PropTypes.elementType,\n\n  /**\n   * The component used to position the popup.\n   * @default Popper\n   */\n  PopperComponent: PropTypes.elementType,\n\n  /**\n   * The icon to display in place of the default popup icon.\n   * @default <ArrowDropDownIcon />\n   */\n  popupIcon: PropTypes.node,\n\n  /**\n   * Render the group.\n   *\n   * @param {any} option The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n\n  /**\n   * Render the input.\n   *\n   * @param {object} params\n   * @returns {ReactNode}\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {object} props The props to apply on the li element.\n   * @param {T} option The option to render.\n   * @param {object} state The state of the component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n\n  /**\n   * Render the selected value.\n   *\n   * @param {T[]} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n\n  /**\n   * If `true`, the input's text is selected on focus.\n   * It helps the user clear the selected value.\n   * @default !props.freeSolo\n   */\n  selectOnFocus: PropTypes.bool,\n\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n\n  /**\n   * The value of the autocomplete.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   * You can customize the equality behavior with the `getOptionSelected` prop.\n   */\n  value: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.value !== undefined && !Array.isArray(props.value)) {\n      return new Error(['Material-UI: The Autocomplete expects the `value` prop to be an array or undefined.', `However, ${props.value} was provided.`].join('\\n'));\n    }\n\n    return null;\n  })\n} : void 0;\nexport default Autocomplete;"]},"metadata":{},"sourceType":"module"}