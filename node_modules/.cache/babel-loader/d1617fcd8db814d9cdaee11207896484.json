{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { deepmerge } from '@material-ui/utils';\nimport { unstable_composeClasses as composeClasses } from '@material-ui/unstyled';\nimport Typography from '../Typography';\nimport useThemeProps from '../styles/useThemeProps';\nimport experimentalStyled from '../styles/experimentalStyled';\nimport cardHeaderClasses, { getCardHeaderUtilityClass } from './cardHeaderClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst overridesResolver = (props, styles) => {\n  return deepmerge({\n    [`& .${cardHeaderClasses.avatar}`]: styles.avatar,\n    [`& .${cardHeaderClasses.action}`]: styles.action,\n    [`& .${cardHeaderClasses.content}`]: styles.content,\n    [`& .${cardHeaderClasses.title}`]: styles.title,\n    [`& .${cardHeaderClasses.subheader}`]: styles.subheader\n  }, styles.root || {});\n};\n\nconst useUtilityClasses = styleProps => {\n  const {\n    classes\n  } = styleProps;\n  const slots = {\n    root: ['root'],\n    avatar: ['avatar'],\n    action: ['action'],\n    content: ['content'],\n    title: ['title'],\n    subheader: ['subheader']\n  };\n  return composeClasses(slots, getCardHeaderUtilityClass, classes);\n};\n\nconst CardHeaderRoot = experimentalStyled('div', {}, {\n  name: 'MuiCardHeader',\n  slot: 'Root',\n  overridesResolver\n})({\n  /* Styles applied to the root element. */\n  display: 'flex',\n  alignItems: 'center',\n  padding: 16\n});\nconst CardHeaderAvatar = experimentalStyled('div', {}, {\n  name: 'MuiCardHeader',\n  slot: 'Avatar'\n})({\n  /* Styles applied to the avatar element. */\n  display: 'flex',\n  flex: '0 0 auto',\n  marginRight: 16\n});\nconst CardHeaderAction = experimentalStyled('div', {}, {\n  name: 'MuiCardHeader',\n  slot: 'Action'\n})({\n  /* Styles applied to the action element. */\n  flex: '0 0 auto',\n  alignSelf: 'flex-start',\n  marginTop: -4,\n  marginRight: -8,\n  marginBottom: -4\n});\nconst CardHeaderContent = experimentalStyled('div', {}, {\n  name: 'MuiCardHeader',\n  slot: 'Content'\n})({\n  /* Styles applied to the content wrapper element. */\n  flex: '1 1 auto'\n});\nconst CardHeader = /*#__PURE__*/React.forwardRef(function CardHeader(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCardHeader'\n  });\n\n  const {\n    action,\n    avatar,\n    className,\n    component = 'div',\n    disableTypography = false,\n    subheader: subheaderProp,\n    subheaderTypographyProps,\n    title: titleProp,\n    titleTypographyProps\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"action\", \"avatar\", \"className\", \"component\", \"disableTypography\", \"subheader\", \"subheaderTypographyProps\", \"title\", \"titleTypographyProps\"]);\n\n  const styleProps = _extends({}, props, {\n    component,\n    disableTypography\n  });\n\n  const classes = useUtilityClasses(styleProps);\n  let title = titleProp;\n\n  if (title != null && title.type !== Typography && !disableTypography) {\n    title = /*#__PURE__*/_jsx(Typography, _extends({\n      variant: avatar ? 'body2' : 'h5',\n      className: classes.title,\n      component: \"span\",\n      display: \"block\"\n    }, titleTypographyProps, {\n      children: title\n    }));\n  }\n\n  let subheader = subheaderProp;\n\n  if (subheader != null && subheader.type !== Typography && !disableTypography) {\n    subheader = /*#__PURE__*/_jsx(Typography, _extends({\n      variant: avatar ? 'body2' : 'body1',\n      className: classes.subheader,\n      color: \"text.secondary\",\n      component: \"span\",\n      display: \"block\"\n    }, subheaderTypographyProps, {\n      children: subheader\n    }));\n  }\n\n  return /*#__PURE__*/_jsxs(CardHeaderRoot, _extends({\n    className: clsx(classes.root, className),\n    as: component,\n    ref: ref,\n    styleProps: styleProps\n  }, other, {\n    children: [avatar && /*#__PURE__*/_jsx(CardHeaderAvatar, {\n      className: classes.avatar,\n      styleProps: styleProps,\n      children: avatar\n    }), /*#__PURE__*/_jsxs(CardHeaderContent, {\n      className: classes.content,\n      styleProps: styleProps,\n      children: [title, subheader]\n    }), action && /*#__PURE__*/_jsx(CardHeaderAction, {\n      className: classes.action,\n      styleProps: styleProps,\n      children: action\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardHeader.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The action to display in the card header.\n   */\n  action: PropTypes.node,\n\n  /**\n   * The Avatar element to display.\n   */\n  avatar: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * If `true`, `subheader` and `title` won't be wrapped by a Typography component.\n   * This can be useful to render an alternative Typography variant by wrapping\n   * the `title` text, and optional `subheader` text\n   * with the Typography component.\n   * @default false\n   */\n  disableTypography: PropTypes.bool,\n\n  /**\n   * The content of the component.\n   */\n  subheader: PropTypes.node,\n\n  /**\n   * These props will be forwarded to the subheader\n   * (as long as disableTypography is not `true`).\n   */\n  subheaderTypographyProps: PropTypes.object,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n\n  /**\n   * The content of the component.\n   */\n  title: PropTypes.node,\n\n  /**\n   * These props will be forwarded to the title\n   * (as long as disableTypography is not `true`).\n   */\n  titleTypographyProps: PropTypes.object\n} : void 0;\nexport default CardHeader;","map":{"version":3,"sources":["/Users/simranbhamra/Documents/cinemates/node_modules/@material-ui/core/CardHeader/CardHeader.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","PropTypes","clsx","deepmerge","unstable_composeClasses","composeClasses","Typography","useThemeProps","experimentalStyled","cardHeaderClasses","getCardHeaderUtilityClass","jsx","_jsx","jsxs","_jsxs","overridesResolver","props","styles","avatar","action","content","title","subheader","root","useUtilityClasses","styleProps","classes","slots","CardHeaderRoot","name","slot","display","alignItems","padding","CardHeaderAvatar","flex","marginRight","CardHeaderAction","alignSelf","marginTop","marginBottom","CardHeaderContent","CardHeader","forwardRef","inProps","ref","className","component","disableTypography","subheaderProp","subheaderTypographyProps","titleProp","titleTypographyProps","other","type","variant","children","color","as","process","env","NODE_ENV","propTypes","node","object","string","elementType","bool","sx"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { deepmerge } from '@material-ui/utils';\nimport { unstable_composeClasses as composeClasses } from '@material-ui/unstyled';\nimport Typography from '../Typography';\nimport useThemeProps from '../styles/useThemeProps';\nimport experimentalStyled from '../styles/experimentalStyled';\nimport cardHeaderClasses, { getCardHeaderUtilityClass } from './cardHeaderClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst overridesResolver = (props, styles) => {\n  return deepmerge({\n    [`& .${cardHeaderClasses.avatar}`]: styles.avatar,\n    [`& .${cardHeaderClasses.action}`]: styles.action,\n    [`& .${cardHeaderClasses.content}`]: styles.content,\n    [`& .${cardHeaderClasses.title}`]: styles.title,\n    [`& .${cardHeaderClasses.subheader}`]: styles.subheader\n  }, styles.root || {});\n};\n\nconst useUtilityClasses = styleProps => {\n  const {\n    classes\n  } = styleProps;\n  const slots = {\n    root: ['root'],\n    avatar: ['avatar'],\n    action: ['action'],\n    content: ['content'],\n    title: ['title'],\n    subheader: ['subheader']\n  };\n  return composeClasses(slots, getCardHeaderUtilityClass, classes);\n};\n\nconst CardHeaderRoot = experimentalStyled('div', {}, {\n  name: 'MuiCardHeader',\n  slot: 'Root',\n  overridesResolver\n})({\n  /* Styles applied to the root element. */\n  display: 'flex',\n  alignItems: 'center',\n  padding: 16\n});\nconst CardHeaderAvatar = experimentalStyled('div', {}, {\n  name: 'MuiCardHeader',\n  slot: 'Avatar'\n})({\n  /* Styles applied to the avatar element. */\n  display: 'flex',\n  flex: '0 0 auto',\n  marginRight: 16\n});\nconst CardHeaderAction = experimentalStyled('div', {}, {\n  name: 'MuiCardHeader',\n  slot: 'Action'\n})({\n  /* Styles applied to the action element. */\n  flex: '0 0 auto',\n  alignSelf: 'flex-start',\n  marginTop: -4,\n  marginRight: -8,\n  marginBottom: -4\n});\nconst CardHeaderContent = experimentalStyled('div', {}, {\n  name: 'MuiCardHeader',\n  slot: 'Content'\n})({\n  /* Styles applied to the content wrapper element. */\n  flex: '1 1 auto'\n});\nconst CardHeader = /*#__PURE__*/React.forwardRef(function CardHeader(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCardHeader'\n  });\n\n  const {\n    action,\n    avatar,\n    className,\n    component = 'div',\n    disableTypography = false,\n    subheader: subheaderProp,\n    subheaderTypographyProps,\n    title: titleProp,\n    titleTypographyProps\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"action\", \"avatar\", \"className\", \"component\", \"disableTypography\", \"subheader\", \"subheaderTypographyProps\", \"title\", \"titleTypographyProps\"]);\n\n  const styleProps = _extends({}, props, {\n    component,\n    disableTypography\n  });\n\n  const classes = useUtilityClasses(styleProps);\n  let title = titleProp;\n\n  if (title != null && title.type !== Typography && !disableTypography) {\n    title = /*#__PURE__*/_jsx(Typography, _extends({\n      variant: avatar ? 'body2' : 'h5',\n      className: classes.title,\n      component: \"span\",\n      display: \"block\"\n    }, titleTypographyProps, {\n      children: title\n    }));\n  }\n\n  let subheader = subheaderProp;\n\n  if (subheader != null && subheader.type !== Typography && !disableTypography) {\n    subheader = /*#__PURE__*/_jsx(Typography, _extends({\n      variant: avatar ? 'body2' : 'body1',\n      className: classes.subheader,\n      color: \"text.secondary\",\n      component: \"span\",\n      display: \"block\"\n    }, subheaderTypographyProps, {\n      children: subheader\n    }));\n  }\n\n  return /*#__PURE__*/_jsxs(CardHeaderRoot, _extends({\n    className: clsx(classes.root, className),\n    as: component,\n    ref: ref,\n    styleProps: styleProps\n  }, other, {\n    children: [avatar && /*#__PURE__*/_jsx(CardHeaderAvatar, {\n      className: classes.avatar,\n      styleProps: styleProps,\n      children: avatar\n    }), /*#__PURE__*/_jsxs(CardHeaderContent, {\n      className: classes.content,\n      styleProps: styleProps,\n      children: [title, subheader]\n    }), action && /*#__PURE__*/_jsx(CardHeaderAction, {\n      className: classes.action,\n      styleProps: styleProps,\n      children: action\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardHeader.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The action to display in the card header.\n   */\n  action: PropTypes.node,\n\n  /**\n   * The Avatar element to display.\n   */\n  avatar: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * If `true`, `subheader` and `title` won't be wrapped by a Typography component.\n   * This can be useful to render an alternative Typography variant by wrapping\n   * the `title` text, and optional `subheader` text\n   * with the Typography component.\n   * @default false\n   */\n  disableTypography: PropTypes.bool,\n\n  /**\n   * The content of the component.\n   */\n  subheader: PropTypes.node,\n\n  /**\n   * These props will be forwarded to the subheader\n   * (as long as disableTypography is not `true`).\n   */\n  subheaderTypographyProps: PropTypes.object,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n\n  /**\n   * The content of the component.\n   */\n  title: PropTypes.node,\n\n  /**\n   * These props will be forwarded to the title\n   * (as long as disableTypography is not `true`).\n   */\n  titleTypographyProps: PropTypes.object\n} : void 0;\nexport default CardHeader;"]},"metadata":{},"sourceType":"module"}