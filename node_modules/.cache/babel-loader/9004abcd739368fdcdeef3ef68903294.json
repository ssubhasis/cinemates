{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { mergeClasses } from '@material-ui/styles';\nimport SelectInput from './SelectInput';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport withStyles from '../styles/withStyles';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport Input from '../Input';\nimport { styles as nativeSelectStyles } from '../NativeSelect/NativeSelect';\nimport NativeSelectInput from '../NativeSelect/NativeSelectInput';\nimport FilledInput from '../FilledInput';\nimport OutlinedInput from '../OutlinedInput';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const styles = nativeSelectStyles;\n\nvar _ref = /*#__PURE__*/_jsx(Input, {});\n\nvar _ref2 = /*#__PURE__*/_jsx(FilledInput, {});\n\nconst Select = /*#__PURE__*/React.forwardRef(function Select(props, ref) {\n  const {\n    autoWidth = false,\n    children,\n    classes,\n    displayEmpty = false,\n    IconComponent = ArrowDropDownIcon,\n    id,\n    input,\n    inputProps,\n    label,\n    labelId,\n    labelWidth = 0,\n    MenuProps,\n    multiple = false,\n    native = false,\n    onClose,\n    onOpen,\n    open,\n    renderValue,\n    SelectDisplayProps,\n    variant: variantProps = 'standard'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"autoWidth\", \"children\", \"classes\", \"displayEmpty\", \"IconComponent\", \"id\", \"input\", \"inputProps\", \"label\", \"labelId\", \"labelWidth\", \"MenuProps\", \"multiple\", \"native\", \"onClose\", \"onOpen\", \"open\", \"renderValue\", \"SelectDisplayProps\", \"variant\"]);\n\n  const inputComponent = native ? NativeSelectInput : SelectInput;\n  const muiFormControl = useFormControl();\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['variant']\n  });\n  const variant = fcs.variant || variantProps;\n  const InputComponent = input || {\n    standard: _ref,\n    outlined: /*#__PURE__*/_jsx(OutlinedInput, {\n      label: label,\n      labelWidth: labelWidth\n    }),\n    filled: _ref2\n  }[variant];\n  return /*#__PURE__*/React.cloneElement(InputComponent, _extends({\n    // Most of the logic is implemented in `SelectInput`.\n    // The `Select` component is a simple API wrapper to expose something better to play with.\n    inputComponent,\n    inputProps: _extends({\n      children,\n      IconComponent,\n      variant,\n      type: undefined,\n      // We render a select. We can ignore the type provided by the `Input`.\n      multiple\n    }, native ? {\n      id\n    } : {\n      autoWidth,\n      displayEmpty,\n      labelId,\n      MenuProps,\n      onClose,\n      onOpen,\n      open,\n      renderValue,\n      SelectDisplayProps: _extends({\n        id\n      }, SelectDisplayProps)\n    }, inputProps, {\n      classes: inputProps ? mergeClasses({\n        baseClasses: classes,\n        newClasses: inputProps.classes,\n        Component: Select\n      }) : classes\n    }, input ? input.props.inputProps : {}),\n    ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Select.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the width of the popover will automatically be set according to the items inside the\n   * menu, otherwise it will be at least the width of the select input.\n   * @default false\n   */\n  autoWidth: PropTypes.bool,\n\n  /**\n   * The option elements to populate the select with.\n   * Can be some `MenuItem` when `native` is false and `option` when `native` is true.\n   *\n   * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, a value is displayed even if no items are selected.\n   *\n   * In order to display a meaningful value, a function can be passed to the `renderValue` prop which\n   * returns the value to be displayed when no items are selected.\n   *\n   * ⚠️ When using this prop, make sure the label doesn't overlap with the empty displayed value.\n   * The label should either be hidden or forced to a shrunk state.\n   * @default false\n   */\n  displayEmpty: PropTypes.bool,\n\n  /**\n   * The icon that displays the arrow.\n   * @default ArrowDropDownIcon\n   */\n  IconComponent: PropTypes.elementType,\n\n  /**\n   * The `id` of the wrapper element or the `select` element when `native`.\n   */\n  id: PropTypes.string,\n\n  /**\n   * An `Input` element; does not have to be a material-ui specific `Input`.\n   */\n  input: PropTypes.element,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   * When `native` is `true`, the attributes are applied on the `select` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * See [OutlinedInput#label](/api/outlined-input/#props)\n   */\n  label: PropTypes.node,\n\n  /**\n   * The ID of an element that acts as an additional label. The Select will\n   * be labelled by the additional label and the selected value.\n   */\n  labelId: PropTypes.string,\n\n  /**\n   * See [OutlinedInput#label](/api/outlined-input/#props)\n   * @default 0\n   */\n  labelWidth: PropTypes.number,\n\n  /**\n   * Props applied to the [`Menu`](/api/menu/) element.\n   */\n  MenuProps: PropTypes.object,\n\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * If `true`, the component uses a native `select` element.\n   * @default false\n   */\n  native: PropTypes.bool,\n\n  /**\n   * Callback fired when a menu item is selected.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (any).\n   * **Warning**: This is a generic event not a change event.\n   * @param {object} [child] The react element that was selected when `native` is `false` (default).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * If `true`, the component is shown.\n   * You can only use it when the `native` prop is `false` (default).\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Render the selected value.\n   * You can only use it when the `native` prop is `false` (default).\n   *\n   * @param {any} value The `value` provided to the component.\n   * @returns {ReactNode}\n   */\n  renderValue: PropTypes.func,\n\n  /**\n   * Props applied to the clickable div element.\n   */\n  SelectDisplayProps: PropTypes.object,\n\n  /**\n   * The `input` value. Providing an empty string will select no options.\n   * Set to an empty string `''` if you don't want any of the available options to be selected.\n   *\n   * If the value is an object it must have reference equality with the option in order to be selected.\n   * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The variant to use.\n   * @default 'standard'\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nSelect.muiName = 'Select';\nexport default withStyles(styles, {\n  name: 'MuiSelect'\n})(Select);","map":{"version":3,"sources":["/Users/simranbhamra/Documents/cinemates/node_modules/@material-ui/core/Select/Select.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","PropTypes","mergeClasses","SelectInput","formControlState","useFormControl","withStyles","ArrowDropDownIcon","Input","styles","nativeSelectStyles","NativeSelectInput","FilledInput","OutlinedInput","jsx","_jsx","_ref","_ref2","Select","forwardRef","props","ref","autoWidth","children","classes","displayEmpty","IconComponent","id","input","inputProps","label","labelId","labelWidth","MenuProps","multiple","native","onClose","onOpen","open","renderValue","SelectDisplayProps","variant","variantProps","other","inputComponent","muiFormControl","fcs","states","InputComponent","standard","outlined","filled","cloneElement","type","undefined","baseClasses","newClasses","Component","process","env","NODE_ENV","propTypes","bool","node","object","defaultValue","any","elementType","string","element","number","onChange","func","value","oneOf","muiName","name"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { mergeClasses } from '@material-ui/styles';\nimport SelectInput from './SelectInput';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport withStyles from '../styles/withStyles';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport Input from '../Input';\nimport { styles as nativeSelectStyles } from '../NativeSelect/NativeSelect';\nimport NativeSelectInput from '../NativeSelect/NativeSelectInput';\nimport FilledInput from '../FilledInput';\nimport OutlinedInput from '../OutlinedInput';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const styles = nativeSelectStyles;\n\nvar _ref = /*#__PURE__*/_jsx(Input, {});\n\nvar _ref2 = /*#__PURE__*/_jsx(FilledInput, {});\n\nconst Select = /*#__PURE__*/React.forwardRef(function Select(props, ref) {\n  const {\n    autoWidth = false,\n    children,\n    classes,\n    displayEmpty = false,\n    IconComponent = ArrowDropDownIcon,\n    id,\n    input,\n    inputProps,\n    label,\n    labelId,\n    labelWidth = 0,\n    MenuProps,\n    multiple = false,\n    native = false,\n    onClose,\n    onOpen,\n    open,\n    renderValue,\n    SelectDisplayProps,\n    variant: variantProps = 'standard'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"autoWidth\", \"children\", \"classes\", \"displayEmpty\", \"IconComponent\", \"id\", \"input\", \"inputProps\", \"label\", \"labelId\", \"labelWidth\", \"MenuProps\", \"multiple\", \"native\", \"onClose\", \"onOpen\", \"open\", \"renderValue\", \"SelectDisplayProps\", \"variant\"]);\n\n  const inputComponent = native ? NativeSelectInput : SelectInput;\n  const muiFormControl = useFormControl();\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['variant']\n  });\n  const variant = fcs.variant || variantProps;\n  const InputComponent = input || {\n    standard: _ref,\n    outlined: /*#__PURE__*/_jsx(OutlinedInput, {\n      label: label,\n      labelWidth: labelWidth\n    }),\n    filled: _ref2\n  }[variant];\n  return /*#__PURE__*/React.cloneElement(InputComponent, _extends({\n    // Most of the logic is implemented in `SelectInput`.\n    // The `Select` component is a simple API wrapper to expose something better to play with.\n    inputComponent,\n    inputProps: _extends({\n      children,\n      IconComponent,\n      variant,\n      type: undefined,\n      // We render a select. We can ignore the type provided by the `Input`.\n      multiple\n    }, native ? {\n      id\n    } : {\n      autoWidth,\n      displayEmpty,\n      labelId,\n      MenuProps,\n      onClose,\n      onOpen,\n      open,\n      renderValue,\n      SelectDisplayProps: _extends({\n        id\n      }, SelectDisplayProps)\n    }, inputProps, {\n      classes: inputProps ? mergeClasses({\n        baseClasses: classes,\n        newClasses: inputProps.classes,\n        Component: Select\n      }) : classes\n    }, input ? input.props.inputProps : {}),\n    ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Select.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the width of the popover will automatically be set according to the items inside the\n   * menu, otherwise it will be at least the width of the select input.\n   * @default false\n   */\n  autoWidth: PropTypes.bool,\n\n  /**\n   * The option elements to populate the select with.\n   * Can be some `MenuItem` when `native` is false and `option` when `native` is true.\n   *\n   * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, a value is displayed even if no items are selected.\n   *\n   * In order to display a meaningful value, a function can be passed to the `renderValue` prop which\n   * returns the value to be displayed when no items are selected.\n   *\n   * ⚠️ When using this prop, make sure the label doesn't overlap with the empty displayed value.\n   * The label should either be hidden or forced to a shrunk state.\n   * @default false\n   */\n  displayEmpty: PropTypes.bool,\n\n  /**\n   * The icon that displays the arrow.\n   * @default ArrowDropDownIcon\n   */\n  IconComponent: PropTypes.elementType,\n\n  /**\n   * The `id` of the wrapper element or the `select` element when `native`.\n   */\n  id: PropTypes.string,\n\n  /**\n   * An `Input` element; does not have to be a material-ui specific `Input`.\n   */\n  input: PropTypes.element,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   * When `native` is `true`, the attributes are applied on the `select` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * See [OutlinedInput#label](/api/outlined-input/#props)\n   */\n  label: PropTypes.node,\n\n  /**\n   * The ID of an element that acts as an additional label. The Select will\n   * be labelled by the additional label and the selected value.\n   */\n  labelId: PropTypes.string,\n\n  /**\n   * See [OutlinedInput#label](/api/outlined-input/#props)\n   * @default 0\n   */\n  labelWidth: PropTypes.number,\n\n  /**\n   * Props applied to the [`Menu`](/api/menu/) element.\n   */\n  MenuProps: PropTypes.object,\n\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * If `true`, the component uses a native `select` element.\n   * @default false\n   */\n  native: PropTypes.bool,\n\n  /**\n   * Callback fired when a menu item is selected.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (any).\n   * **Warning**: This is a generic event not a change event.\n   * @param {object} [child] The react element that was selected when `native` is `false` (default).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * If `true`, the component is shown.\n   * You can only use it when the `native` prop is `false` (default).\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Render the selected value.\n   * You can only use it when the `native` prop is `false` (default).\n   *\n   * @param {any} value The `value` provided to the component.\n   * @returns {ReactNode}\n   */\n  renderValue: PropTypes.func,\n\n  /**\n   * Props applied to the clickable div element.\n   */\n  SelectDisplayProps: PropTypes.object,\n\n  /**\n   * The `input` value. Providing an empty string will select no options.\n   * Set to an empty string `''` if you don't want any of the available options to be selected.\n   *\n   * If the value is an object it must have reference equality with the option in order to be selected.\n   * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The variant to use.\n   * @default 'standard'\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nSelect.muiName = 'Select';\nexport default withStyles(styles, {\n  name: 'MuiSelect'\n})(Select);"]},"metadata":{},"sourceType":"module"}