{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/simranbhamra/Documents/cinemates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport { isObject, mergeWith as merge, runIfFn } from \"@chakra-ui/utils\";\nimport { pseudoSelectors } from \"./pseudos\";\nimport { systemProps as systemPropConfigs } from \"./system\";\nexport var expandResponsive = function expandResponsive(styles) {\n  return function (theme) {\n    if (!theme.__breakpoints) return styles;\n    var _theme$__breakpoints = theme.__breakpoints,\n        isResponsive = _theme$__breakpoints.isResponsive,\n        toArrayValue = _theme$__breakpoints.toArrayValue,\n        medias = _theme$__breakpoints.media;\n    var computedStyles = {};\n\n    for (var key in styles) {\n      var value = runIfFn(styles[key], theme);\n      if (value == null) continue;\n      value = isObject(value) && isResponsive(value) ? toArrayValue(value) : value;\n\n      if (!Array.isArray(value)) {\n        computedStyles[key] = value;\n        continue;\n      }\n\n      var queries = value.slice(0, medias.length).length;\n\n      for (var index = 0; index < queries; index += 1) {\n        var media = medias == null ? void 0 : medias[index];\n\n        if (!media) {\n          computedStyles[key] = value[index];\n          continue;\n        }\n\n        computedStyles[media] = computedStyles[media] || {};\n\n        if (value[index] == null) {\n          continue;\n        }\n\n        computedStyles[media][key] = value[index];\n      }\n    }\n\n    return computedStyles;\n  };\n};\nexport function getCss(options) {\n  var _options$configs = options.configs,\n      configs = _options$configs === void 0 ? {} : _options$configs,\n      _options$pseudos = options.pseudos,\n      pseudos = _options$pseudos === void 0 ? {} : _options$pseudos,\n      theme = options.theme;\n\n  var css = function css(stylesOrFn, nested) {\n    if (nested === void 0) {\n      nested = false;\n    }\n\n    var _styles = runIfFn(stylesOrFn, theme);\n\n    var styles = expandResponsive(_styles)(theme);\n    var computedStyles = {};\n\n    for (var k in styles) {\n      var _config$transform, _config, _config2, _config3, _config4, _config5, _config6, _config7;\n\n      var valueOrFn = styles[k];\n      var value = runIfFn(valueOrFn, theme);\n      var key = k in pseudos ? pseudos[k] : k;\n      var config = configs[key];\n\n      if (config === true) {\n        config = {\n          property: key\n        };\n      }\n\n      if (isObject(value)) {\n        computedStyles[key] = css(value, true);\n        continue;\n      }\n\n      var rawValue = (_config$transform = (_config = config) == null ? void 0 : _config.transform == null ? void 0 : _config.transform(value, theme)) != null ? _config$transform : value;\n      rawValue = (_config2 = config) != null && _config2.processResult ? css(rawValue, true) : rawValue;\n\n      if ((_config3 = config) != null && _config3.property) {\n        config.property = runIfFn(config.property, theme);\n      }\n\n      if (!nested && (_config4 = config) != null && _config4.static) {\n        var staticStyles = runIfFn(config.static, theme);\n        computedStyles = merge({}, computedStyles, staticStyles);\n      }\n\n      if ((_config5 = config) != null && _config5.property && Array.isArray((_config6 = config) == null ? void 0 : _config6.property)) {\n        var _iterator = _createForOfIteratorHelper(config.property),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var property = _step.value;\n            computedStyles[property] = rawValue;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        continue;\n      }\n\n      if ((_config7 = config) != null && _config7.property) {\n        if (config.property === \"&\" && isObject(rawValue)) {\n          computedStyles = merge({}, computedStyles, rawValue);\n        } else {\n          computedStyles[config.property] = rawValue;\n        }\n\n        continue;\n      }\n\n      if (isObject(rawValue)) {\n        computedStyles = merge({}, computedStyles, rawValue);\n        continue;\n      }\n\n      computedStyles[key] = rawValue;\n    }\n\n    return computedStyles;\n  };\n\n  return css;\n}\nexport var css = function css(styles) {\n  return function (theme) {\n    var cssFn = getCss({\n      theme: theme,\n      pseudos: pseudoSelectors,\n      configs: systemPropConfigs\n    });\n    return cssFn(styles);\n  };\n};","map":{"version":3,"sources":["../../src/css.ts"],"names":["mergeWith","systemProps","expandResponsive","styles","theme","media","medias","computedStyles","value","runIfFn","isObject","isResponsive","toArrayValue","Array","queries","index","configs","pseudos","css","nested","_styles","valueOrFn","key","k","config","property","rawValue","staticStyles","merge","cssFn","getCss","systemPropConfigs"],"mappings":"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","sourcesContent":["import { Dict, isObject, mergeWith as merge, runIfFn } from \"@chakra-ui/utils\"\nimport * as CSS from \"csstype\"\nimport { Config, PropConfig } from \"./prop-config\"\nimport { pseudoSelectors } from \"./pseudos\"\nimport { systemProps as systemPropConfigs } from \"./system\"\nimport { CssTheme, StyleObjectOrFn } from \"./types\"\n\nexport const expandResponsive = (styles: Dict) => (theme: Dict) => {\n  if (!theme.__breakpoints) return styles\n  const { isResponsive, toArrayValue, media: medias } = theme.__breakpoints\n\n  const computedStyles: Dict = {}\n\n  for (const key in styles) {\n    let value = runIfFn(styles[key], theme)\n\n    if (value == null) continue\n\n    value = isObject(value) && isResponsive(value) ? toArrayValue(value) : value\n\n    if (!Array.isArray(value)) {\n      computedStyles[key] = value\n      continue\n    }\n\n    const queries = value.slice(0, medias.length).length\n\n    for (let index = 0; index < queries; index += 1) {\n      const media = medias?.[index]\n\n      if (!media) {\n        computedStyles[key] = value[index]\n        continue\n      }\n\n      computedStyles[media] = computedStyles[media] || {}\n\n      if (value[index] == null) {\n        continue\n      }\n\n      computedStyles[media][key] = value[index]\n    }\n  }\n\n  return computedStyles\n}\n\ninterface Options {\n  theme: CssTheme\n  configs?: Config\n  pseudos?: Record<string, CSS.Pseudos | (string & {})>\n}\n\nexport function getCss(options: Options) {\n  const { configs = {}, pseudos = {}, theme } = options\n\n  const css = (stylesOrFn: Dict, nested = false) => {\n    const _styles = runIfFn(stylesOrFn, theme)\n    const styles = expandResponsive(_styles)(theme)\n\n    let computedStyles: Dict = {}\n\n    for (const k in styles) {\n      const valueOrFn = styles[k]\n      const value = runIfFn(valueOrFn, theme)\n      const key = k in pseudos ? pseudos[k] : k\n\n      let config = configs[key]\n\n      if (config === true) {\n        config = { property: key } as PropConfig\n      }\n\n      if (isObject(value)) {\n        computedStyles[key] = css(value, true)\n        continue\n      }\n\n      let rawValue = config?.transform?.(value, theme) ?? value\n      rawValue = config?.processResult ? css(rawValue, true) : rawValue\n\n      if (config?.property) {\n        config.property = runIfFn(config.property, theme)\n      }\n\n      if (!nested && config?.static) {\n        const staticStyles = runIfFn(config.static, theme)\n        computedStyles = merge({}, computedStyles, staticStyles)\n      }\n\n      if (config?.property && Array.isArray(config?.property)) {\n        for (const property of config.property) {\n          computedStyles[property] = rawValue\n        }\n        continue\n      }\n\n      if (config?.property) {\n        if (config.property === \"&\" && isObject(rawValue)) {\n          computedStyles = merge({}, computedStyles, rawValue)\n        } else {\n          computedStyles[config.property as string] = rawValue\n        }\n        continue\n      }\n\n      if (isObject(rawValue)) {\n        computedStyles = merge({}, computedStyles, rawValue)\n        continue\n      }\n\n      computedStyles[key] = rawValue\n    }\n\n    return computedStyles\n  }\n\n  return css\n}\n\nexport const css = (styles: StyleObjectOrFn) => (theme: any) => {\n  const cssFn = getCss({\n    theme,\n    pseudos: pseudoSelectors,\n    configs: systemPropConfigs,\n  })\n  return cssFn(styles)\n}\n"]},"metadata":{},"sourceType":"module"}